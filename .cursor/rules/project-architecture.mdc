---
description: 
globs: 
alwaysApply: false
---
# Project Architecture & Technical Overview

**Date:** June 2025 (Updated)

This document provides a technical overview of the Band Platform and Extrch.co Link Page features within the `generatepress_child` theme, outlining architecture, implemented components, and a high-level overview.

## Overview

The Band Platform and Extrch.co Link Page features create a WordPress-based ecosystem for bands, offering customizable profiles and link pages with integrated forums and analytics, designed for shared control and community engagement.

## I. Band Platform

**Objective:** Establish a band-centric entity (`band_profile` CPT) with associated hidden bbPress forums, linked user accounts (`_band_profile_ids` user meta), and frontend management interfaces for shared control. Extend access to `user_is_professional` role in addition to `user_is_artist`.

**Core Principles:**
- **Band-Centric:** `band_profile` CPT as the primary entity.
- **Modularity:** Code located in [`band-platform/`](mdc:band-platform).
- **Leverage WordPress/bbPress:** Extend existing systems.
- **Shared Control:** Permissions managed via [`user_has_cap`](mdc:https:/developer.wordpress.org/reference/hooks/user_has_cap) filter.
- **Frontend Management:** Exclusive frontend UIs for band management.
- **DRY:** Consolidate forms and logic.

### Implemented Components:

- **`band_profile` CPT:** Registered in [`band-platform/cpt-band-profile.php`](mdc:band-platform/cpt-band-profile.php). Supports standard fields and custom meta for forum linking, link page association, and header images.
- **User-to-Band Linking (Membership):** Manages user associations with band profiles via user meta. Includes Admin UI in User Profile Edit screen and `band_profile` admin meta box, and frontend management interfaces.
- **Hidden Band Forums:** Created automatically for new `band_profile` posts via a `save_post_band_profile` hook in [`band-platform/band-forums.php`](mdc:band-platform/band-forums.php). Forums are linked via meta and hidden from admin lists. Permalinks redirect to the band profile page.
- **Band Member Permissions:** Implemented via [`user_has_cap`](mdc:https:/developer.wordpress.org/reference/hooks/user_has_cap) filter in [`band-platform/band-permissions.php`](mdc:band-platform/band-permissions.php), granting CPT and bbPress capabilities based on band membership and public topic creation settings. The `_allow_public_topic_creation` meta on the *band_profile CPT* controls whether non-members can create topics in the band's forum, defaulting to true.
- **Frontend Band Profile Display:** [`single-band_profile.php`](mdc:single-band_profile.php) displays profile data, images, associated forum topics, and the new topic form.
- **Frontend Band Management:** Consolidated Create/Edit functionality in [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php). Handles profile data, links, image uploads, and member management. Frontend form processing is handled in [`band-platform/frontend-forms.php`](mdc:band-platform/frontend-forms.php), while the member management UI is located in [`band-platform/roster/manage-roster-ui.php`](mdc:band-platform/roster/manage-roster-ui.php).
- **Band Member Management (Roster):** Frontend UI in [`band-platform/roster/manage-roster-ui.php`](mdc:band-platform/roster/manage-roster-ui.php) handles removing existing members. An invitation system via email is implemented with AJAX handlers ([`band-platform/roster/roster-ajax-handlers.php`](mdc:band-platform/roster/roster-ajax-handlers.php)), data functions ([`band-platform/roster/roster-data-functions.php`](mdc:band-platform/roster/roster-data-functions.php)), and email logic ([`band-platform/roster/band-invitation-emails.php`](mdc:band-platform/roster/band-invitation-emails.php)). Invitation acceptance is handled on the `init` hook.
- **Bi-directional Data Synchronization:** Logic in [`band-platform/data-sync.php`](mdc:band-platform/data-sync.php) synchronizes Band Name, Bio, and Profile Picture between `band_profile` and `band_link_page` CPTs.
- **Conditional User Avatar Menu Item:** Added to the user avatar dropdown in the header via `wp_surgeon_add_notification_bell_icon` in [`forum-features/notifications.php`](mdc:forum-features/notifications.php). This item conditionally displays "Manage Band(s)" (linking to the most recently updated band profile) or "Create Band Profile" based on the user's band associations.
- **User Search for Linking:** AJAX search functionality in [`band-platform/user-linking.php`](mdc:band-platform/user-linking.php) used for linking users to a band profile (admin meta box) now includes users with either `user_is_artist` or `user_is_professional` meta. UI labels have been updated.
- **User Profile Edit Fieldset:** The fieldset on the user edit form in [`bbpress/form-user-edit.php`](mdc:bbpress/form-user-edit.php), titled "Band Platform", now displays if the user has either `user_is_artist` or `user_is_professional` meta.
- **Registration Logic:** The registration logic in [`forum-features/register.php`](mdc:forum-features/register.php) includes a checkbox for "I am a musician" which sets `user_is_artist`. The forced setting of `user_is_artist` on band invite acceptance/registration has been removed, respecting user choice via checkboxes. The checkbox logic may require further review depending on the desired relationship between "artist" status and band management capability.
- **User Profile Meta Update:** The `extrachill_update_user_profile_meta` function in [`functions.php`](mdc:functions.php) updates `user_is_artist` and `user_is_professional` based on POST values from the user profile edit form. Its current implementation is appropriate and does not conflict with recent changes regarding band management capabilities or user choice.
- **Login/Register Page Consolidation:** The separate login and registration pages (`forum-features/login.php`, `forum-features/register.php`, `forum-features/logout.php`, `forum-features/registration-emails.php`) have been consolidated into a single page using the new `page-templates/login-register-template.php`. The core logic and forms have been refactored to work within a tabbed interface managed by `js/shared-tabs.js`. Includes were updated, vestigial AJAX handlers removed, and redirects modified to maintain state with URL hashes. Cloudflare Turnstile integration was updated to work with the new template.
- **Unified Band Email Subscriber System (Replaces "Band Follower Contact & Privacy"):**
    - **Single Source of Truth for Email Consent:** The `wp_band_subscribers` custom database table ([`band-platform/subscribe/subscriber-db.php`](mdc:band-platform/subscribe/subscriber-db.php)) is the sole repository for all consented email addresses for each band, whether from link page subscriptions or platform user follow consent.
    - **Platform Follow Consent:** When a user follows a `band_profile` and gives email consent (typically via a modal or checkbox during the follow action), their `user_id`, email, and username are added/updated in `wp_band_subscribers` with `source = 'platform_follow_consent'`. This logic is handled in `bp_follow_band()` within [`band-platform/band-following.php`](mdc:band-platform/band-following.php).
    - **Unfollowing:** When a user unfollows a band, their corresponding `platform_follow_consent` record in `wp_band_subscribers` is removed. This is handled by `bp_unfollow_band()` in [`band-platform/band-following.php`](mdc:band-platform/band-following.php).
    - **Deprecated Meta:** The `_band_follow_email_permissions` user meta is deprecated and no longer used for managing email consent.
    - **"Subscribers" Tab in Band Management:** The "Subscribers" tab in [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php) (content from [`band-platform/manage-band-profile-tabs/tab-subscribers.php`](mdc:band-platform/manage-band-profile-tabs/tab-subscribers.php)) now *exclusively* lists subscribers from the `wp_band_subscribers` table for the current band. The previous display of general followers has been removed from this tab. Data is fetched via the `extrch_fetch_band_subscribers_ajax` AJAX handler (in [`band-platform/subscribe/subscribe-data-functions.php`](mdc:band-platform/subscribe/subscribe-data-functions.php)) and managed by [`band-platform/js/manage-band-subscribers.js`](mdc:band-platform/js/manage-band-subscribers.js). The tab includes functionality to export subscribers (CSV) via `extrch_export_subscribers_csv`.
    - **User Control via "Subscriptions" Tab (Settings Page):** Users manage their email sharing preferences per band they follow via the "Subscriptions" tab in their main account settings ([`page-templates/settings-page.php`](mdc:page-templates/settings-page.php)). This interface interacts with `wp_band_subscribers` (for `source = 'platform_follow_consent'`) via the `bp_ajax_update_user_band_subscriptions_handler` in [`band-platform/band-following.php`](mdc:band-platform/band-following.php).
    - **Follower Tracking:** General band following (without necessary email consent) is still tracked via the `_followed_band_profile_ids` user meta. The `_band_follower_count` post meta on `band_profile` reflects this general follower count.

### Frontend Band Management UI Update:

The [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php) page has been refactored to use a tabbed interface for better organization.
- **Tabs:** Includes "Band Info" (for profile data, images, and link page management), "Roster" (for member management, visible only in edit mode), and "Subscribers" (to view and manage band email subscribers from `wp_band_subscribers`, visible only in edit mode).
    - **Image Previews:** Upload fields for Profile Picture and Band Forum Header Image feature live JavaScript-powered previews. The header image preview maintains a 16:9 aspect ratio.
    - **Pre-fill for New Bands:** When creating a new band profile, fields like Band Name and Bio are pre-filled with the user's display name and biographical information. If a custom avatar exists, it is used as the initial preview for the Profile Picture.
- **Styling:** New styles for the tabbed interface are in [`css/manage-band-profile.css`](mdc:css/manage-band-profile.css), aiming for a "content card" appearance.
- **Assets:** Necessary CSS and JavaScript (e.g., [`js/manage-band-profiles.js`](mdc:js/manage-band-profiles.js) for tab switching and member management, and [`band-platform/js/manage-band-subscribers.js`](mdc:band-platform/js/manage-band-subscribers.js) for the subscribers tab) are enqueued via `extrachill_enqueue_manage_band_profile_assets` in [`functions.php`](mdc:functions.php). Legacy files and features have been removed or centralized.

## II. `extrachill.link` Page Feature (Canonical, June 2025)

**Objective:** Provide a free, customizable "link in bio" service (`band_link_page` CPT) integrated with the Band Platform, hosted on `extrachill.link` (and `extrch.co`), driving traffic to the main platform.

### Canonical Architecture (as of June 2025)

- **Single Source of Truth:**
  - The `<style id="extrch-link-page-custom-vars">` tag inside the preview container is the *sole* source of truth for all live preview CSS variables. All JS-driven changes (color, font, etc.) update this style tag directly and immediately reflect in the preview.
  - The hidden input (`#link_page_custom_css_vars_json`) is *only* used for saving, not for live preview or intermediate state. It is populated/serialized immediately before form submission by reading/parsing the current state from the style tag (and overlay toggle, etc).
  - There are *no* JS globals or window-level state objects for canonical data. All initialization and hydration is from PHP-rendered values.

- **Live Preview & Save Flow:**
  - On initial page load, PHP outputs a `<style>` block in the `<head>` with all saved custom CSS variables (from the canonical JSON in post meta). This ensures the preview and controls are immediately styled with the correct, saved values—no FOUC, no JS intervention needed for initial state.
  - JavaScript attaches event listeners to controls. On user change, JS updates only the relevant CSS variable (using `style.setProperty` or by updating the style tag), and the affected preview element. No global re-render, no re-initialization, no fallback to defaults after page load.
  - The main JS function for updating settings (`updateSetting`) only updates the style tag and calls the preview updater. It does not touch the hidden input.
  - The canonical save handler (`manage-link-page-save.js`) is responsible for serializing the style tag and overlay state into the hidden input before save.

- **Hidden Inputs for JS-Managed Data:**
  - For any data managed or edited via JavaScript (e.g., links, social icons, custom CSS vars, advanced settings), a hidden input must be present in the form. JavaScript must update these hidden inputs *only before form submission*, ensuring that PHP receives the correct, current data. This is required for robust, reliable saving in a PHP-driven architecture.

- **AJAX-Only Features:**
  - Only the QR code generation and analytics tab use AJAX for fetching/generating data. All other data is handled via standard form POST.

- **Recent Fixes (June 2025):**
  - Share modal, QR code modal, analytics tab, tab restoration after save, and temporary redirect dropdown are all now fully functional and hydrated from canonical DOM state. All legacy or duplicate style blocks have been removed.

- **Redundant/Outdated Logic:**
  - All references to JS globals, redundant hydration, or hidden input being updated on every change have been removed. The documentation and codebase now reflect the canonical, DRY, and KISS-compliant architecture.

### Implemented Components:

- **`band_link_page` CPT:** Registered in [`band-platform/extrch.co-link-page/cpt-band-link-page.php`](mdc:band-platform/extrch.co-link-page/cpt-band-link-page.php). Stores link page data and customization settings, with a one-to-one relationship with `band_profile`.
- **Automatic Creation:** Logic in [`band-platform/extrch.co-link-page/create-link-page.php`](mdc:band-platform/extrch.co-link-page/create-link-page.php) creates a link page for new band profiles and manages the default site link page.
- **Data Storage:** Meta fields on `band_link_page` CPT store page identity, appearance customization (including CSS variables), and links data. Data saving is centralized in [`link-page-form-handler.php`](mdc:band-platform/extrch.co-link-page/link-page-form-handler.php). Social icons are managed on this interface and synced to the `band_profile` CPT.
- **Frontend Management Interface:** [`page-templates/manage-link-page.php`](mdc:page-templates/manage-link-page.php) provides a tabbed UI ([`manage-link-page-tabs/tab-*.php`](mdc:band-platform/extrch.co-link-page/manage-link-page-tabs)) for all `band_link_page` settings. Data is fetched via [`LivePreviewManager::get_preview_data()`](mdc:band-platform/extrch.co-link-page/live-preview/LivePreviewManager.php:1). Modular JavaScript handles UI and live preview updates, including URL parameter-based tab activation. The public URL displayed shows the clean `extrachill.link/bandname` format, while the underlying `href` attribute contains the full HTTPS URL. The edit button on the live link page is now conditionally displayed for logged-in band members by including the button HTML in `single-band_link_page.php` and using JavaScript (`link-page-session.js`) to control its visibility based on an AJAX call to the main site (`community.extrachill.com`) that checks band management capability via standard WordPress authentication cookies.
- **Routing and Display:** [`link-page-rewrites.php`](mdc:band-platform/extrch.co-link-page/link-page-rewrites.php) handles routing for the `extrachill.link` domain, ensuring canonical public URLs and permanent redirects from `extrch.co` and the CPT permalink.
- **Asset Management (Link Page):** Public CSS is in [`css/extrch-links.css`](mdc:band-platform/extrch.co-link-page/css/extrch-links.css), admin CSS for the manager is in [`css/manage-link-page.css`](mdc:css/manage-link-page.css). Modular JavaScript is located in the [`js/`](mdc:band-platform/extrch.co-link-page/js) directory. Assets are enqueued via [`link-page-includes.php`](mdc:band-platform/extrch.co-link-page/link-page-includes.php). The public page uses a minimal head to isolate assets, with the custom head logic now modularized into [`link-page-head.php`](mdc:band-platform/extrch.co-link-page/link-page-head.php).
    - **Google Analytics Integration:** The main site's Google Analytics tracking script will be added to the `<head>` of the live link page template (`extrch-link-page-template.php`) to collect administrative analytics data for all link page views.
    - **Favicon:** An explicit favicon link using `get_site_icon_url()` is included in the `<head>` via `link-page-head.php` to resolve redirect issues.
- **Key Features:** Unlimited Links, Social Icons, Basic Analytics, Customization (Background, Title Font, Body Font, Text Color, Button Style/Colors), Responsive Design, Link Expiration, Temporary Redirect, QR Code & Share Menu, **Suggested Link Titles** (automatic title fetching for new links), **Inline YouTube Video Previews** (click a YouTube link button to play the video directly on the page, controlled by a global setting), **Social Icons Position** (allows users to place social icons above or below links) are implemented.
- **Share Modal:** Implemented with share icons on the main link page and individual links. Uses Web Share API where available, with fallbacks. Modal HTML is in [`extrch-link-page-template.php`](mdc:band-platform/extrch.co-link-page/extrch-link-page-template.php), CSS in [`css/extrch-share-modal.css`](mdc:band-platform/extrch.co-link-page/css/extrch-share-modal.css), and JS in [`js/extrch-share-modal.js`](mdc:band-platform/extrch.co-link-page/js/extrch-share-modal.js), enqueued via [`link-page-includes.php`](mdc:band-platform/extrch.co-link-page/link-page-includes.php).
- **Analytics & Tracking:** Implemented with custom DB tables managed by [`link-page-analytics-db.php`](mdc:band-platform/extrch.co-link-page/link-page-analytics-db.php). Tracking via client-side JS ([`js/link-page-public-tracking.js`](mdc:band-platform/extrch.co-link-page/js/link-page-public-tracking.js)) and AJAX endpoint ([`link-page-analytics-tracking.php`](mdc:band-platform/extrch.co-link-page/link-page-analytics-tracking.php)). Data retrieval is available via AJAX. Permissions for viewing analytics are controlled by the `view_band_link_page_analytics` capability, dynamically granted to band members via the `user_has_cap` filter. Data pruning is implemented via WP Cron. Includes support for Google and Meta pixels.
- **Weekly Performance Email:** Implemented via WP Cron in [`band-platform/extrch.co-link-page/link-page-weekly-email.php`](mdc:band-platform/extrch.co-link-page/link-page-weekly-email.php). Sends a consolidated weekly email to each user summarizing performance for their opted-in link pages and associated band forum activity.

### User Navigation Enhancements:

- **Conditional "Manage Link Page(s)" User Menu Item:** Added to the user avatar dropdown in [`forum-features/notifications.php`](mdc:forum-features/notifications.php). If the user has associated band profiles, this links to the manage link page for the most recently updated band profile.
- **Band Switcher for Link Page Management:** A dropdown has been added to [`page-templates/manage-link-page.php`](mdc:page-templates/manage-link-page.php) allowing users with multiple band profiles to switch which band's link page they are managing, mirroring the functionality on the "Manage Band Profile" page.

## III. Customization & Live Preview JavaScript Architecture (Canonical, June 2025)

This section outlines the structure and responsibilities of the core JavaScript modules governing the link page manager's live preview and UI interactions. The architecture adheres to the principle of the DOM (specifically PHP-rendered values and the style tag) as the primary source of truth, with no persistent JavaScript state or global objects for canonical data. Hidden inputs are used solely for transmitting data to the PHP save handler on form submission.

**Key Modules and Responsibilities:**

*   **Main Manager (`manage-link-page.js`):** The central orchestrator. Initializes other JavaScript modules upon `DOMContentLoaded`. Handles overall coordination, shared utility functions, and may trigger updates based on broader page events. It does NOT maintain canonical data state; modules it initializes hydrate from the DOM. Non-critical console logs have been removed from this file to improve debugging clarity.
*   **"Brain" Modules:** These modules manage the user interface controls and interactions for specific domains within the manager (e.g., styles, links, social icons, advanced settings). They read the initial state from the DOM/hidden inputs and update the relevant DOM elements (including the style tag or hidden inputs before save) in response to user actions. Examples include:
    *   [`manage-link-page-customization.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-customization.js): Manages UI for style-related settings (colors, fonts, etc.) and updates the `#extrch-link-page-custom-vars` style tag.
    *   [`manage-link-page-links.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-links.js): Manages the links list UI (add, remove, reorder, edit) and updates the hidden input storing link data (`#link_page_links_json`) before save, and updates the preview via the "Content Engine".
    *   [`manage-link-page-socials.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-socials.js): Manages the social icons UI and updates the hidden input storing social icon data (`#band_profile_social_links_json`) before save, and updates the preview via the "Content Engine". Also handles the new social icons position setting, triggering preview updates.
    *   ... (other relevant JS files like colors, fonts, sizing, info, etc., act as "Brains" for their specific UI domains, hydrating from and writing to the DOM/hidden inputs)
    *Note: "Brains" refer to logic controllers managing specific domains (e.g., styles, links) by interacting with their UI controls and the DOM, while "Engines" handle rendering or preview updates based on DOM state.*
*   **"Engine" Modules:** These modules are responsible for rendering or updating the live preview based on the current state of the DOM (style tag, content elements).
    *   [`manage-link-page-preview-updater.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-preview-updater.js): The "Styles Engine". Responsible for applying CSS custom properties from the `#extrch-link-page-custom-vars` style tag to the preview elements.
    *   [`manage-link-page-content-renderer.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-content-renderer.js): The "Content Engine". Responsible for rendering list-based content like link sections and social icons into the live preview DOM based on the data in the relevant hidden inputs or UI controls (like the social icons position radio). Handles clearing previous content and dynamically creating/updating HTML elements, including managing the display of social icon containers based on the chosen position.
*   **Save Handler (`manage-link-page-save.js`):** This dedicated module is responsible for the final step before form submission. It serializes the current state from the DOM (reading the `#extrch-link-page-custom-vars` style tag, the overlay toggle, etc.) into the hidden input (`#link_page_custom_css_vars_json`) to ensure the PHP save handler receives the most up-to-date customization data. It also ensures the `tab` hidden input is set correctly for post-save redirection.
*   **AJAX Handler for Link Titles (`ajax-handlers.php`):** A PHP file containing the `extrch_fetch_link_meta_title_ajax_handler` function. This WordPress AJAX action (`wp_ajax_fetch_link_meta_title`) is responsible for receiving a URL, fetching its content server-side using `wp_safe_remote_get`, parsing the HTML for `<title>` or `og:title` tags, and returning the found title. This is triggered by `manage-link-page-links.js` when a user inputs a URL and the title field is blank.
*   **Inline YouTube Embeds (`link-page-youtube-embed.js`):** A dedicated JavaScript module that detects YouTube links on the public link page and in the admin preview. When a YouTube link button is clicked, it prevents default navigation and instead dynamically embeds a YouTube iframe player below the button. This feature can be toggled globally via a setting in the "Advanced" tab of the link page manager, which controls the conditional enqueueing of this script. Associated CSS is in `extrch-links.css`.
*   **QR Code Handler (`manage-link-page-qrcode.js`):** Dedicated module for managing the QR code modal and triggering the AJAX request to generate and display the link page QR code. It listens for clicks on the QR code button, controls the visibility of the modal, and handles the AJAX response to display the generated QR code image or an error message.

## IV. Band Directory Enhancements

### Implemented:

Updated the visual presentation of band cards in the custom band directory ([`band-platform/band-directory.php`](mdc:band-platform/band-directory.php) and [`bbpress/loop-single-band-card.php`](mdc:bbpress/loop-single-band-card.php)) to be more attractive and consistent with the main band profile page design.
- The band's profile picture is displayed as a square overlaid on top of the band's header image.
- The `bbpress/loop-single-band-card.php` template was updated to fetch and display the header image with a 16/9 aspect ratio, display the profile picture as an 80x80px square overlaid on the header image area, conditionally output a placeholder if images are missing, and ensure elements are linked to the band's profile page.
- CSS in [`css/band-profile-cards.css`](mdc:css/band-profile-cards.css) was enhanced to style the overlaid profile picture and band title, handle title color and positioning for various image scenarios, style the placeholder, and ensure the visual container has a minimum height.
- The `enqueue_user_profile_styles` function in [`functions.php`](mdc:functions.php) was updated to ensure [`css/band-profile-cards.css`](mdc:css/band-profile-cards.css) is loaded on relevant pages.

### Band Directory (Forum 5432)

The bbPress forum with ID 5432 is specifically designated as the "Band Directory". This forum provides a unique view that lists `band_profile` Custom Post Type entries instead of standard bbPress topics.

**Key Features & Implementation:**

*   **Custom Loop Template:** The standard topic loop for forum 5432 is replaced by a custom template located at [`bbpress/loop-band-profiles.php`](mdc:bbpress/loop-band-profiles.php), loaded via a filter function defined in [`band-platform/band-directory.php`](mdc:band-platform/band-directory.php).
*   **Content Display:** The `loop-band-profiles.php` template queries and displays `band_profile` CPT entries, rendering each as a card using the template part [`bbpress/loop-single-band-card.php`](mdc:bbpress/loop-single-band-card.php).
*   **Functionality:** Includes sorting options (Recent Activity, Alphabetical, Popular), search by name, standard bbPress pagination, and conditional "Manage Band(s)" and "Manage Link Page(s)" buttons displayed at the top for eligible logged-in users.
*   **Integrated Activity Display:** The "Latest:" activity display for the 'top' forum section now correctly includes the latest activity from all band forums associated with `band_profile` CPTs by combining standard and band forum queries within `fetch_latest_post_info_by_section` in [`forum-features/latest-post-info.php`](mdc:forum-features/latest-post-info.php).
*   **Accurate Freshness Time:** The freshness time displayed on the Band Directory card ([`bbpress/loop-single-forum-card.php`](mdc:bbpress/loop-single-forum-card.php)) now accurately shows the verbose time difference (e.g., "19 minutes ago") by utilizing `human_time_diff` with GMT timestamp comparisons.

## V. Canonical Redirect Prevention and Custom Routing for extrachill.link

**Date Added:** May 2025
**Last Updated:** May 21, 2025

To ensure that public link pages on extrachill.link (e.g., extrachill.link/band-slug) are always routed correctly and that the root domain and non-existent slugs provide a clean URL experience, we implement custom routing logic in [`link-page-rewrites.php`](mdc:band-platform/extrch.co-link-page/link-page-rewrites.php).

**1. Preventing Canonical Redirects:**

A custom filter on `redirect_canonical`, `extrch_prevent_canonical_redirect_for_link_domain`, is used to prevent WordPress's default canonical redirects when the host is `extrachill.link`. This is crucial for our custom routing system to take precedence.

```php
add_filter( 'redirect_canonical', 'extrch_prevent_canonical_redirect_for_link_domain', 10, 2 );
function extrch_prevent_canonical_redirect_for_link_domain( $redirect_url, $requested_url ) {
    $current_host = strtolower( $_SERVER['SERVER_NAME'] ?? '' );
    if ( $current_host === 'extrachill.link' ) {
        error_log('[DEBUG] extrch_prevent_canonical_redirect_for_link_domain: Preventing redirect for host ' . $current_host);
        return false; // Prevent WordPress canonical redirect
    }
    return $redirect_url;
}
```

**2. Custom Template Inclusion and Routing (`template_include`):**

The `template_include` filter is used to intercept requests on the `extrachill.link` domain and load the appropriate template or perform redirects based on the requested path:

*   **Root Path (`/`), Default Slug (`/extra-chill/`), and Non-Existent Slugs:** Requests to the root (`/`), the default 'extra-chill' slug (`/extra-chill/`), or any path that does not correspond to a valid `band_link_page` slug (other than 'extra-chill') or the `/manage-link-page/` path will display the content of the 'extra-chill' link page. Requests for the `/extra-chill/` slug and non-existent slugs will be permanently redirected (301) to the root domain (`https://extrachill.link/`) for a clean URL in the browser address bar.
*   **Valid Band Slugs (Other than `/extra-chill/`):** If the requested path matches the `post_name` of a published `band_link_page` post (and the slug is not 'extra-chill'), the main WordPress query is modified to load that specific `band_link_page` post, and the `single-band_link_page.php` template is loaded.
*   **Manage Link Page Path (`/manage-link-page/`):** If the requested path is exactly `/manage-link-page/`, the main WordPress query is modified to load the standard WordPress page with the slug 'manage-link-page', and the `page-templates/manage-link-page.php` template is loaded.

This logic ensures that the bare `extrachill.link/` serves as the primary landing page for the default content, while valid band slugs are displayed at their respective URLs and the management interface is accessible.

**3. Redirecting Direct CPT Access (`template_redirect`):**

The `template_redirect` action hook is used to redirect users accessing `band_link_page` posts directly via their default WordPress permalink structure (e.g., `https://community-stage.local/band-link-page/band-slug/`) to their canonical URL on the `extrachill.link` domain (`https://extrachill.link/band-slug/`)

## Login and Registration Module

The login and registration functionality is handled by files within the `login/` directory and integrated into a combined page using the `page-templates/login-register-template.php` template.

-   **[`page-templates/login-register-template.php`](mdc:page-templates/login-register-template.php):** This template file sets up a tabbed interface using the `shared-tabs-component` class. It includes the PHP files for the login form (`login/login.php`) and the registration form (`login/register.php`) within separate tabs. It calls `wp_surgeon_login_form()` and `wp_surgeon_registration_form_shortcode()` to display the respective forms.

-   **[`login/login.php`](mdc:login/login.php):** Contains the `wp_surgeon_login_form()` function which outputs the HTML for the login form. The form action points to `wp-login.php` or `admin-ajax.php`. Cloudflare Turnstile is **not** directly integrated into this file.

-   **[`login/register.php`](mdc:login/register.php):** Contains the `wp_surgeon_registration_form_shortcode()` function which outputs the HTML for the registration form. This file includes the Cloudflare Turnstile widget with `data-sitekey="0x4AAAAAAAPvQsUv5Z6QBB5n"` and `data-callback="community_register"`. It also contains the server-side validation logic in `wp_surgeon_verify_turnstile()` which checks the `cf-turnstile-response` POST parameter against Cloudflare's API using the secret key `0x4AAAAAAAPvQp7DbBfqJD7LW-gbrAkiAb0`. Verification is bypassed in the 'development' environment.

-   **[`login/login-includes.php`](mdc:login/login-includes.php):** This file includes the core PHP files for the login module (`login.php`, `register.php`, `logout.php`, `registration-emails.php`). It also enqueues the Cloudflare Turnstile API script (`https://challenges.cloudflare.com/turnstile/v0/api.js`) and the `login-register-tabs.js` script specifically for the login/register template page.

-   **[`login/js/login-register-tabs.js`](mdc:login/js/login-register-tabs.js):** This JavaScript file handles the client-side functionality for switching between the login and registration tabs. It now also contains the `community_register` JavaScript function which is called by the Cloudflare Turnstile widget upon successful verification. This function retrieves the Turnstile token and adds it to the registration form data before submission.

-   **[`extrachill-integration/serve-login-form.php`](mdc:extrachill-integration/serve-login-form.php):** This file provides a login form via a REST API endpoint, primarily for external use (e.g., on extrachill.com). It is separate from the combined login/register page within the theme and does not include Cloudflare Turnstile.

### Cloudflare Turnstile Issue

The "captcha verification failed" error on the login page (specifically the registration tab) was caused by the missing `community_register` JavaScript function. The Cloudflare Turnstile widget was configured to call this function upon successful client-side verification, but the function was not defined. This prevented the Turnstile response from being properly handled and sent with the registration form submission, leading to server-side validation failure.

**Resolution:** The `community_register` JavaScript function has been implemented in `login/js/login-register-tabs.js`. This function now correctly handles the Turnstile callback, retrieves the token, and includes it in the registration form submission, resolving the validation error.

## Forum Section Logic and Sorting

A custom system is in place to categorize forums into sections ('top', 'middle', 'none') using the `_bbp_forum_section` post meta. This affects their display in `bbpress/loop-forums.php` and allows hiding forums from the main lists.

-   **[`bbpress-customization.php`](mdc:bbpress-customization.php):** Contains the `add_section_dropdown_to_forum_edit` function which adds a dropdown to the forum edit screen in the WordPress admin to select the forum section. The 'bottom' option has been changed to 'none'. The `save_forum_section` function saves this meta value.

-   **[`bbpress/loop-forums.php`](mdc:bbpress/loop-forums.php):** This template file displays forums in different sections. It now uses a `bbp_has_forums` loop filtered to display forums with the `_bbp_forum_section` meta set to 'middle', ordered by `_bbp_last_active_time` descending. The 'top' section display was initially using a manual loop which caused rendering issues. It has been reverted to a standard `bbp_has_forums` loop.

-   **[`band-platform/band-forums.php`](mdc:band-platform/band-forums.php):** The `bp_create_band_forum_on_save` function, which creates a bbPress forum when a band profile is published, has been modified to automatically set the `_bbp_forum_section` meta to 'none' for new band forums. This hides them from the main forum lists by default.

-   **[`band-platform/band-directory.php`](mdc:band-platform/band-directory.php):** This file contains logic specific to the Band Directory forum (ID 5432), including the `bp_get_band_profile_last_activity_timestamp` function which calculates a custom "last activity" time based on activity across all associated band forums. This custom time is displayed within the Band Directory forum card (`bbpress/loop-single-forum-card.php`).

-   **[`bbpress/loop-single-forum-card.php`](mdc:bbpress/loop-single-forum-card.php):** This template part is used to display individual forum cards. It contains specific logic to display custom stats and freshness information for the Band Directory forum (ID 5432), using the custom calculated activity time.

-   **[`functions.php`](mdc:functions.php):** A filter `ec_filter_top_forums_by_last_active` has been added to the `bbp_pre_query_forums` hook. This filter modifies the main query for the bbPress forums loop (specifically targeting the loops in `bbpress/loop-forums.php`) to: 
    -   Include a `meta_query` to filter forums by `_bbp_forum_section` = 'top'.
    -   Set the `orderby` parameter to `meta_value` using `_bbp_last_active_time` and `order` to `DESC`. 
    *Note: This standard query-based sorting uses the forum's `_bbp_last_active_time` meta. The Band Directory forum (ID 5432) has a custom last activity calculation which is displayed in its card, but this custom value is not directly used for sorting in the main forums list query. Its position in the 'top' list will be based on its standard `_bbp_last_active_time`.*

## Band Platform: Join Flow (User Onboarding)

The join flow provides a guided onboarding experience for new or existing users arriving from `extrachill.link/join`:

- **Entry Point:** Requests to `extrachill.link/join` are redirected to the main site's login/register page with a join flag (`from_join=true`). (See `band-platform/extrch.co-link-page/link-page-rewrites.php`)
- **Login/Register Modal:** The login/register template (`page-templates/login-register-template.php`) displays a modal (handled by `login/js/join-flow-ui.js`) prompting the user to log in or register. Tab switching is managed by `js/shared-tabs.js`.
- **Authentication:**
    - If the user logs in and has a band profile, they are redirected to the manage link page for their most recently updated band (`login/login.php`).
    - If the user logs in and does not have a band profile, they are redirected to create one (`page-templates/manage-band-profile.php`).
- **Band Profile Creation:** After creating a band profile, the user is redirected to the manage link page for the new band (`band-platform/frontend-forms.php`).
- **Notices:** Contextual notices are displayed at each step to guide the user (`page-templates/manage-band-profile.php`, `page-templates/manage-link-page.php`).

This flow ensures a seamless onboarding experience, guiding users from authentication through band profile creation to link page management, with all logic and UI handled in the referenced files.

## Head Output and Tracking Pixel Logic

The `extrch_link_page_custom_head` function is used ONLY for the public/live link page and outputs meta, favicon, CSS, Google Fonts, custom CSS vars, session JS, analytics, and all tracking pixels (including user-level pixels from the advanced tab and site-level Google Tag Manager).

A new function/file, `extrch_link_page_custom_vars_and_fonts_head`, is now used for outputting ONLY the custom CSS variables and Google Fonts, and is used in both the public/live page (via the custom head) and the manage page (via a `wp_head` action).

The manage page now uses only the new function for CSS vars and fonts, and does NOT output any tracking pixels, analytics, or session JS in its head.

Remove or update any previous references that implied the custom head was used for the manage page.

Ensure the documentation for the advanced tab and tracking settings is accurate and clear about where and how these are output.

Integrate these updates into the existing structure, refactoring as needed for clarity and accuracy.

## Refactor Plan: Microstep Approach

The link page manager refactor will proceed in microsteps, each focused on a single card/module within a tab. Each microstep includes:
- Reviewing and refactoring initialization, hydration, and save logic for that card/module.
- Ensuring hidden inputs and JS state are handled correctly.
- Updating the live preview logic for that card/module.
- Testing and documenting the changes.

### Customizer Tab Microsteps
1. Background Card
2. Title Font Card
3. Body Font Card
4. Button Style Card
5. Other Customizer Controls

### Links Tab Microsteps
1. Link Sections and Links
2. Social Icons

### Advanced Tab Microsteps
1. Expiration, Notifications, Redirect
2. Tracking Pixels (Meta Pixel, Google Tag, etc.)

### Analytics Tab Microsteps
1. AJAX Analytics Fetch and Display

### QR Code Microstep
1. QR Code Generation

### Final Microstep: Code Cleanup
- Remove all legacy, duplicate, or commented-out code.
- Ensure all modules use the new initialization and save flow.
- Update documentation and inline comments for clarity.
- Final round of testing across all tabs and features.

## Outlook
- This microstep approach ensures each part of the UI and save flow is robust, testable, and maintainable.
- The plan is now actionable, clear, and up-to-date, and aligns with the current state of the codebase and the new head output separation.

## Link Page Rendering Architecture (Canonical Source of Truth)

The canonical, single source of truth for all link page rendering logic is the `band-platform/extrch.co-link-page/extrch-link-page-template.php` file. This template contains all shared logic and markup for the link page, including profile image, title, bio, links, social icons, subscribe button, and all conditional rendering for context (e.g., subscribe form/modal, social icon position, featured link, etc).

- **Public/Live Page:** The public-facing link page (`single-band_link_page.php`) gathers all necessary data (via `LinkPageDataProvider`), handles public-only logic (edit button, tracking, analytics, head output), and includes the canonical template with the data array.
- **Management Preview:** The management interface preview (`band-platform/extrch.co-link-page/live-preview/preview.php`) acts as a wrapper for the preview context, sets up preview-specific classes and context, and includes the canonical template with the preview data. It sets the `is_extrch_preview_iframe` query var for context.
- **Context Handling:** The canonical template uses context flags (such as `is_extrch_preview_iframe`) to conditionally render preview- or live-only elements. All context-specific logic (wrappers, analytics, edit button, etc.) is handled by the respective wrapper files or via these flags.

**All changes to the link page's structure, classes, or logic should be made in `extrch-link-page-template.php` only.** The preview and live page will always be in sync, as they use the same template. There is no duplication of the main link page structure or logic.

## VI. TinyMCE Customization

The TinyMCE editor used in bbPress has been customized for enhanced functionality and consistent styling. These customizations are primarily handled in [`forum-features/tinymce-customization.php`](mdc:forum-features/tinymce-customization.php) and [`css/tinymce-editor.css`](mdc:css/tinymce-editor.css).

- The `bbp_customize_tinymce_buttons` function in [`forum-features/tinymce-customization.php`](mdc:forum-features/tinymce-customization.php) has been modified to include 'formatselect' in the list of buttons, allowing users to select header elements.
- The custom stylesheet [`css/tinymce-editor.css`](mdc:css/tinymce-editor.css) is loaded into the TinyMCE editor's content iframe using the `mce_css` filter via the `bbp_add_tinymce_stylesheet` function. This stylesheet is specifically for styling the *content* displayed within the editor iframe, not the editor UI itself.
- To ensure styles apply within the iframe and override default TinyMCE styles, many CSS declarations in `css/tinymce-editor.css` utilize `!important` flags.
- Color variables defined in the main theme's `:root` are made available within the TinyMCE iframe by including a duplicate set of these definitions at the beginning of `css/tinymce-editor.css`, scoped to the iframe's `:root`.
- The `extrachillTinymceSetup` JavaScript function, added via the `tiny_mce_before_init` filter and output in the footer, handles custom TinyMCE initialization logic, including integrating the autosave plugin.
- The function finds the closest parent form to the editor instance and attaches a submit event listener to it to clear autosave drafts on submission. This approach, by not checking for specific form IDs (`new-post`, `new-post-quick`), was found to resolve a conflict where the presence of the quick reply form interfered with the loading of other forms on the page.
- Styling the TinyMCE editor toolbar and other UI elements outside the content iframe requires targeting them with CSS rules in stylesheets loaded on the main page (e.g., `style.css`) or other relevant theme stylesheets, as `tinymce-editor.css` only affects the iframe content.
- The `content_css` argument is no longer used for loading `tinymce-editor.css`; the `mce_css` filter is the current method.

## Current State & Pre-Launch Technical Debt (June 2025)

- **PHP/JS Sync:** Featured link rendering, socials/subscribe form order, and class application logic exist in both PHP and JS. These must be kept in sync to avoid UI drift between live and preview.
- **Vestigial Settings/Meta:** Some settings and meta keys (e.g., featured link custom title) are now obsolete and should be removed as features are refactored.
- **DRYness:** Insertion logic for socials/subscribe and class naming should be kept DRY and centralized where possible.
- **Button Border & Subscribe Form CSS:** There is inconsistency in button border styling and subscribe form CSS scoping between live and preview. This should be unified for a consistent user experience.
- **All above issues are confirmed, documented, and prioritized for pre-launch resolution.**

## Featured Link and Live Preview

- The featured link's custom class (`bp-editor-featured-link`) is now set server-side on initial render, ensuring correct visual highlighting. JavaScript only moves this class when the user changes the featured link selection; it does not touch the initial state.
- Real-time updates for the featured link's title and description in the live preview are now canonical. When the user edits the title or description for the featured link, the preview updates instantly, without re-fetching the thumbnail or causing a flash.
- The featured link thumbnail is only fetched (via AJAX) on initial link selection. Editing the title or description does not trigger a new fetch or reload of the thumbnail, preventing unnecessary flashes.
- For further details on the canonical data flow and featured link architecture, see [finalize-link-page-source-of-truth.mdc](mdc:.cursor/rules/finalize-link-page-source-of-truth.mdc) and [feature-featured-link.mdc](mdc:.cursor/rules/feature-featured-link.mdc).
- The JavaScript logic for the featured link is now fully DRY and modular. All preview and live logic is kept in sync via the canonical template (`extrch-link-page-template.php`) and the canonical data provider (`LinkPageDataProvider.php`).

## Link Page Customization Data Keys (Canonical Naming)

- The canonical key for the profile image shape in the link page customization JSON is `_link_page_profile_img_shape`.
- All hydration and save logic (both PHP and JS) must use this key for reading and writing the profile image shape.
- (Note: All legacy keys, such as `--link-page-profile-img-shape`, have been fully removed from the codebase and are no longer supported. Only the canonical key `_link_page_profile_img_shape` is valid.)

### Hydration and Save Flow (Explicit)
- On initial page load, PHP hydrates all form controls and the `<style id="extrch-link-page-custom-vars">` tag from the canonical `$custom_vars` array, which is decoded from the `_link_page_custom_css_vars` JSON meta.
- The preview and all controls must always reflect the value of the canonical key.
- JavaScript never sets initial values; it only listens for changes and updates the preview and hidden input before save.
- There must never be a mismatch between the style tag and the form controls, as both are hydrated from the same source.
- Legacy meta is only used as a fallback for old data, never as a primary source.
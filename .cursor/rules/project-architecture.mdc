---
description: 
globs: 
alwaysApply: true
---
# Project Architecture & Technical Overview

**Date:** May 20, 2025

This document provides a technical overview of the Band Platform and Extrch.co Link Page features within the `generatepress_child` theme, outlining architecture, implemented components, and a high-level overview.

## Overview

The Band Platform and Extrch.co Link Page features create a WordPress-based ecosystem for bands, offering customizable profiles and link pages with integrated forums and analytics, designed for shared control and community engagement.

## I. Band Platform

**Objective:** Establish a band-centric entity (`band_profile` CPT) with associated hidden bbPress forums, linked user accounts (`_band_profile_ids` user meta), and frontend management interfaces for shared control. Extend access to `user_is_professional` role in addition to `user_is_artist`.

**Core Principles:**
- **Band-Centric:** `band_profile` CPT as the primary entity.
- **Modularity:** Code located in [`band-platform/`](mdc:band-platform).
- **Leverage WordPress/bbPress:** Extend existing systems.
- **Shared Control:** Permissions managed via [`user_has_cap`](mdc:https:/developer.wordpress.org/reference/hooks/user_has_cap) filter.
- **Frontend Management:** Exclusive frontend UIs for band management.
- **DRY:** Consolidate forms and logic.

### Implemented Components:

- **`band_profile` CPT:** Registered in [`band-platform/cpt-band-profile.php`](mdc:band-platform/cpt-band-profile.php). Supports standard fields and custom meta for forum linking, link page association, and header images.
- **User-to-Band Linking (Membership):** Manages user associations with band profiles via user meta. Includes Admin UI in User Profile Edit screen and `band_profile` admin meta box, and frontend management interfaces.
- **Hidden Band Forums:** Created automatically for new `band_profile` posts via a `save_post_band_profile` hook in [`band-platform/band-forums.php`](mdc:band-platform/band-forums.php). Forums are linked via meta and hidden from admin lists. Permalinks redirect to the band profile page.
- **Band Member Permissions:** Implemented via [`user_has_cap`](mdc:https:/developer.wordpress.org/reference/hooks/user_has_cap) filter in [`band-platform/band-permissions.php`](mdc:band-platform/band-permissions.php), granting CPT and bbPress capabilities based on band membership and public topic creation settings. The `_allow_public_topic_creation` meta on the *band_profile CPT* controls whether non-members can create topics in the band's forum, defaulting to true.
- **Frontend Band Profile Display:** [`single-band_profile.php`](mdc:single-band_profile.php) displays profile data, images, associated forum topics, and the new topic form.
- **Frontend Band Management:** Consolidated Create/Edit functionality in [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php). Handles profile data, links, image uploads, and member management. Frontend form processing is handled in [`band-platform/frontend-forms.php`](mdc:band-platform/frontend-forms.php), while the member management UI is located in [`band-platform/roster/manage-roster-ui.php`](mdc:band-platform/roster/manage-roster-ui.php).
- **Band Member Management (Roster):** Frontend UI in [`band-platform/roster/manage-roster-ui.php`](mdc:band-platform/roster/manage-roster-ui.php) handles removing existing members. An invitation system via email is implemented with AJAX handlers ([`band-platform/roster/roster-ajax-handlers.php`](mdc:band-platform/roster/roster-ajax-handlers.php)), data functions ([`band-platform/roster/roster-data-functions.php`](mdc:band-platform/roster/roster-data-functions.php)), and email logic ([`band-platform/roster/band-invitation-emails.php`](mdc:band-platform/roster/band-invitation-emails.php)). Invitation acceptance is handled on the `init` hook.
- **Bi-directional Data Synchronization:** Logic in [`band-platform/data-sync.php`](mdc:band-platform/data-sync.php) synchronizes Band Name, Bio, and Profile Picture between `band_profile` and `band_link_page` CPTs.
- **Conditional User Avatar Menu Item:** Added to the user avatar dropdown in the header via `wp_surgeon_add_notification_bell_icon` in [`forum-features/notifications.php`](mdc:forum-features/notifications.php). This item conditionally displays "Manage Band(s)" (linking to the most recently updated band profile) or "Create Band Profile" based on the user's band associations.
- **User Search for Linking:** AJAX search functionality in [`band-platform/user-linking.php`](mdc:band-platform/user-linking.php) used for linking users to a band profile (admin meta box) now includes users with either `user_is_artist` or `user_is_professional` meta. UI labels have been updated.
- **User Profile Edit Fieldset:** The fieldset on the user edit form in [`bbpress/form-user-edit.php`](mdc:bbpress/form-user-edit.php), titled "Band Platform", now displays if the user has either `user_is_artist` or `user_is_professional` meta.
- **Registration Logic:** The registration logic in [`forum-features/register.php`](mdc:forum-features/register.php) includes a checkbox for "I am a musician" which sets `user_is_artist`. The forced setting of `user_is_artist` on band invite acceptance/registration has been removed, respecting user choice via checkboxes. The checkbox logic may require further review depending on the desired relationship between "artist" status and band management capability.
- **User Profile Meta Update:** The `extrachill_update_user_profile_meta` function in [`functions.php`](mdc:functions.php) updates `user_is_artist` and `user_is_professional` based on POST values from the user profile edit form. Its current implementation is appropriate and does not conflict with recent changes regarding band management capabilities or user choice.
- **Login/Register Page Consolidation:** The separate login and registration pages (`forum-features/login.php`, `forum-features/register.php`, `forum-features/logout.php`, `forum-features/registration-emails.php`) have been consolidated into a single page using the new `page-templates/login-register-template.php`. The core logic and forms have been refactored to work within a tabbed interface managed by `js/shared-tabs.js`. Includes were updated, vestigial AJAX handlers removed, and redirects modified to maintain state with URL hashes. Cloudflare Turnstile integration was updated to work with the new template.
- **Band Follower Contact & Privacy (NEW PLAN - Replaces "Band Follower Email Export & Privacy"):**
    - **Modal-Based Consent on Follow:** When a user clicks to follow a `band_profile`, a modal will appear asking for explicit consent to share their email address with *that specific band*.
    - **Per-User, Per-Band Preference Storage:** The user's decision to share their email is stored on a per-band basis (e.g., in user meta).
    - **Default for Existing Follows:** For any follows that existed before this system, the email sharing preference defaults to `false`. Users can update this via the new "Subscriptions" tab in their settings.
    - **Global Email Sharing Setting Obsolete:** The previous global user setting and its UI will be removed.
    - **"Followers" Tab in Band Management:** A "Followers" tab will be added to [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php) listing followers by username and conditionally displaying email addresses based on consent. Includes functionality to export a list of consenting followers (CSV).
    - **User Control via "Subscriptions" Tab:** Users will have a dedicated "Subscriptions" tab in their main account settings ([`page-templates/settings-page.php`](mdc:page-templates/settings-page.php)) allowing them to view followed bands, manage email sharing preferences per band, and unfollow bands.
    *Note: A flowchart or diagram illustrating the follower consent and data flow process would enhance clarity.*

### Frontend Band Management UI Update:

The [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php) page has been refactored to use a tabbed interface for better organization.
- **Tabs:** Includes "Band Info" (for profile data, images, and link page management) and "Roster" (for member management, visible only in edit mode).
    - **Image Previews:** Upload fields for Profile Picture and Band Forum Header Image feature live JavaScript-powered previews. The header image preview maintains a 16:9 aspect ratio.
    - **Pre-fill for New Bands:** When creating a new band profile, fields like Band Name and Bio are pre-filled with the user's display name and biographical information. If a custom avatar exists, it is used as the initial preview for the Profile Picture.
- **Styling:** New styles for the tabbed interface are in [`css/manage-band-profile.css`](mdc:css/manage-band-profile.css), aiming for a "content card" appearance.
- **Assets:** Necessary CSS and JavaScript (e.g., [`js/manage-band-profiles.js`](mdc:js/manage-band-profiles.js) for tab switching and member management) are enqueued via `extrachill_enqueue_manage_band_profile_assets` in [`functions.php`](mdc:functions.php). Legacy files and features have been removed or centralized.

## II. `extrachill.link` Page Feature

**Objective:** Provide a free, customizable "link in bio" service (`band_link_page` CPT) integrated with the Band Platform, hosted on `extrachill.link` (and `extrch.co`), driving traffic to the main platform.
**Core Principles:**
- **Free "Premium" Features:** Offer advanced customization and basic analytics.
- **Seamless Integration:** Managed via the band's frontend dashboard.
- **Community Driven:** Gateway to the main platform.
- **Simplicity:** Built within WordPress.

### Implemented Components:

- **`band_link_page` CPT:** Registered in [`band-platform/extrch.co-link-page/cpt-band-link-page.php`](mdc:band-platform/extrch.co-link-page/cpt-band-link-page.php). Stores link page data and customization settings, with a one-to-one relationship with `band_profile`.
- **Automatic Creation:** Logic in [`band-platform/extrch.co-link-page/create-link-page.php`](mdc:band-platform/extrch.co-link-page/create-link-page.php) creates a link page for new band profiles and manages the default site link page.
- **Data Storage:** Meta fields on `band_link_page` CPT store page identity, appearance customization (including CSS variables), and links data. Data saving is centralized in [`link-page-form-handler.php`](mdc:band-platform/extrch.co-link-page/link-page-form-handler.php). Social icons are managed on this interface and synced to the `band_profile` CPT.
- **Frontend Management Interface:** [`page-templates/manage-link-page.php`](mdc:page-templates/manage-link-page.php) provides a tabbed UI ([`manage-link-page-tabs/tab-*.php`](mdc:band-platform/extrch.co-link-page/manage-link-page-tabs)) for all `band_link_page` settings. Data is fetched via [`LivePreviewManager::get_preview_data()`](mdc:band-platform/extrch.co-link-page/live-preview/LivePreviewManager.php:1). Modular JavaScript handles UI and live preview updates, including URL parameter-based tab activation. The public URL displayed shows the clean `extrachill.link/bandname` format, while the underlying `href` attribute contains the full HTTPS URL. The edit button on the live link page is now conditionally displayed for logged-in band members by including the button HTML in `single-band_link_page.php` and using JavaScript (`link-page-session.js`) to control its visibility based on an AJAX call to the main site (`community.extrachill.com`) that checks band management capability via standard WordPress authentication cookies.
- **Routing and Display:** [`link-page-rewrites.php`](mdc:band-platform/extrch.co-link-page/link-page-rewrites.php) handles routing for the `extrachill.link` domain, ensuring canonical public URLs and permanent redirects from `extrch.co` and the CPT permalink.
- **Asset Management (Link Page):** Public CSS is in [`css/extrch-links.css`](mdc:band-platform/extrch.co-link-page/css/extrch-links.css), admin CSS for the manager is in [`css/manage-link-page.css`](mdc:css/manage-link-page.css). Modular JavaScript is located in the [`js/`](mdc:band-platform/extrch.co-link-page/js) directory. Assets are enqueued via [`link-page-includes.php`](mdc:band-platform/extrch.co-link-page/link-page-includes.php). The public page uses a minimal head to isolate assets, with the custom head logic now modularized into [`link-page-head.php`](mdc:band-platform/extrch.co-link-page/link-page-head.php).
    - **Google Analytics Integration:** The main site's Google Analytics tracking script will be added to the `<head>` of the live link page template (`extrch-link-page-template.php`) to collect administrative analytics data for all link page views.
    - **Favicon:** An explicit favicon link using `get_site_icon_url()` is included in the `<head>` via `link-page-head.php` to resolve redirect issues.
- **Key Features:** Unlimited Links, Social Icons, Basic Analytics, Customization (Background, Title Font, Body Font, Text Color, Button Style/Colors), Responsive Design, Link Expiration, Temporary Redirect, QR Code & Share Menu, **Suggested Link Titles** (automatic title fetching for new links), **Inline YouTube Video Previews** (click a YouTube link button to play the video directly on the page, controlled by a global setting) are implemented.
- **Share Modal:** Implemented with share icons on the main link page and individual links. Uses Web Share API where available, with fallbacks. Modal HTML is in [`extrch-link-page-template.php`](mdc:band-platform/extrch.co-link-page/extrch-link-page-template.php), CSS in [`css/extrch-share-modal.css`](mdc:band-platform/extrch.co-link-page/css/extrch-share-modal.css), and JS in [`js/extrch-share-modal.js`](mdc:band-platform/extrch.co-link-page/js/extrch-share-modal.js), enqueued via [`link-page-includes.php`](mdc:band-platform/extrch.co-link-page/link-page-includes.php).
- **Analytics & Tracking:** Implemented with custom DB tables managed by [`link-page-analytics-db.php`](mdc:band-platform/extrch.co-link-page/link-page-analytics-db.php). Tracking via client-side JS ([`js/link-page-public-tracking.js`](mdc:band-platform/extrch.co-link-page/js/link-page-public-tracking.js)) and AJAX endpoint ([`link-page-analytics-tracking.php`](mdc:band-platform/extrch.co-link-page/link-page-analytics-tracking.php)). Data retrieval is available via AJAX. Permissions for viewing analytics are controlled by the `view_band_link_page_analytics` capability, dynamically granted to band members via the `user_has_cap` filter. Data pruning is implemented via WP Cron. Includes support for Google and Meta pixels.
- **Weekly Performance Email:** Implemented via WP Cron in [`band-platform/extrch.co-link-page/link-page-weekly-email.php`](mdc:band-platform/extrch.co-link-page/link-page-weekly-email.php). Sends a consolidated weekly email to each user summarizing performance for their opted-in link pages and associated band forum activity.

### User Navigation Enhancements:

- **Conditional "Manage Link Page(s)" User Menu Item:** Added to the user avatar dropdown in [`forum-features/notifications.php`](mdc:forum-features/notifications.php). If the user has associated band profiles, this links to the manage link page for the most recently updated band profile.
- **Band Switcher for Link Page Management:** A dropdown has been added to [`page-templates/manage-link-page.php`](mdc:page-templates/manage-link-page.php) allowing users with multiple band profiles to switch which band's link page they are managing, mirroring the functionality on the "Manage Band Profile" page.

## III. Customization & Live Preview Logic (as of May 2025)

**Canonical Data Flow and Save Architecture:**

- **PHP-Driven Save Flow:** All data saving is handled by standard WordPress form POSTs. The form is submitted to PHP, which processes and saves the data. JavaScript does not handle saving (except for QR code and analytics, which use AJAX for their specific features).
- **Hidden Inputs for JS-Managed Data:** For any data managed or edited via JavaScript (e.g., links, social icons, custom CSS vars, advanced settings), a hidden input must be present in the form. JavaScript must update these hidden inputs before form submission, ensuring that PHP receives the correct, current data. This is required for robust, reliable saving in a PHP-driven architecture.
- **Initialization from PHP:** On page load, all form fields and CSS custom vars are populated by PHP from the saved values. JavaScript must hydrate its internal state from the DOM/form fields, not from JS globals or window-level objects. The live preview and all form fields must always reflect the saved state on initial load.
- **JavaScript is Cosmetic Only:** JavaScript is used exclusively for real-time visual updates (live preview, UI interactivity, drag-and-drop, etc.). It does not handle saving, except for QR code and analytics AJAX features. All other data must be present in the form at submit time.
- **AJAX-Only Features:** Only the QR code generation and analytics tab use AJAX for fetching/generating data. All other data is handled via standard form POST.

**Developer Note:**
- Removing hidden inputs is only valid if the entire save flow is refactored to be fully AJAX/JS-driven, which is not the current architecture. If the save flow remains PHP-driven, hidden inputs are required for all JS-managed data.
- The canonical source of truth for initialization is always the PHP-rendered form fields and CSS vars, not any JS global or window object.

**Relevant Files:**
*   [`band-platform/extrch.co-link-page/js/manage-link-page.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page.js): Main manager script. Responsible for overall coordination and initializing other modules.
*   [`band-platform/extrch.co-link-page/js/manage-link-page-preview-updater.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-preview-updater.js): The "Styles Engine" (handles CSS custom properties for the live preview).
*   [`band-platform/extrch.co-link-page/js/manage-link-page-content-renderer.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-content-renderer.js): The "Content Engine" (handles rendering of list-based content like link sections and social icons into the live preview).
*   [`band-platform/extrch.co-link-page/js/manage-link-page-customization.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-customization.js): The "Styles Brain" (manages `customVars` for styling).
*   [`band-platform/extrch.co-link-page/js/manage-link-page-links.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-links.js): The "Links Brain" (manages link data).
*   [`band-platform/extrch.co-link-page/js/manage-link-page-socials.js`](mdc:band-platform/extrch.co-link-page/js/manage-link-page-socials.js): The "Socials Brain" (manages social icon data).
*   ... (other relevant JS files like colors, fonts, sizing etc. - these are typically "Brains" for their specific domain)

**Architecture Overview:**

The refactored JavaScript architecture aims to centralize state management and decouple UI control logic from preview update logic, improving maintainability and enabling real-time updates.

- **Main Manager (`manage-link-page.js`):** Initializes and coordinates all other JavaScript modules. Provides utility functions and handles AJAX-based preview updates for certain changes.
- **"Brain" Modules:** Modules responsible for managing the UI controls and data for their specific domain (e.g., styles, links, social icons, background settings). The "Styles Brain" (`manage-link-page-customization.js`) manages the central `customVars` object for styling and notifies the "Styles Engine" of updates. The "Links Brain" and "Socials Brain" manage their data arrays and call the "Content Engine" to update the live preview.
    *Note: "Brains" refer to logic controllers managing specific domains (e.g., styles, links), while "Engines" handle rendering or preview updates.*
- **`manage-link-page-preview-updater.js` ("The Styles Engine"):** Responsible for all live preview DOM manipulations related to CSS custom properties (styles). Applies specific CSS custom properties to the preview element.
- **`manage-link-page-content-renderer.js` ("The Content Engine"):** Responsible for rendering list-based content like link sections and social icons into the live preview DOM. Handles clearing previous content and dynamically creating/updating HTML elements.
- **`manage-link-page-qrcode.js` ("QR Code Handler"):** Dedicated module for managing the QR code modal and triggering the AJAX request to generate and display the link page QR code. It listens for clicks on the QR code button, controls the visibility of the modal, and handles the AJAX response to display the generated QR code image or an error message.
- **AJAX Handler for Link Titles (`ajax-handlers.php`):** A PHP file containing the `extrch_fetch_link_meta_title_ajax_handler` function. This WordPress AJAX action (`wp_ajax_fetch_link_meta_title`) is responsible for receiving a URL, fetching its content server-side using `wp_safe_remote_get`, parsing the HTML for `<title>` or `og:title` tags, and returning the found title. This is triggered by `manage-link-page-links.js` when a user inputs a URL and the title field is blank.
- **Inline YouTube Embeds (`link-page-youtube-embed.js`):** A dedicated JavaScript module that detects YouTube links on the public link page and in the admin preview. When a YouTube link button is clicked, it prevents default navigation and instead dynamically embeds a YouTube iframe player below the button. This feature can be toggled globally via a setting in the "Advanced" tab of the link page manager, which controls the conditional enqueueing of this script. Associated CSS is in `extrch-links.css`.

## IV. Band Directory Enhancements

### Implemented:

Updated the visual presentation of band cards in the custom band directory ([`band-platform/band-directory.php`](mdc:band-platform/band-directory.php) and [`bbpress/loop-single-band-card.php`](mdc:bbpress/loop-single-band-card.php)) to be more attractive and consistent with the main band profile page design.
- The band's profile picture is displayed as a square overlaid on top of the band's header image.
- The `bbpress/loop-single-band-card.php` template was updated to fetch and display the header image with a 16/9 aspect ratio, display the profile picture as an 80x80px square overlaid on the header image area, conditionally output a placeholder if images are missing, and ensure elements are linked to the band's profile page.
- CSS in [`css/band-profile-cards.css`](mdc:css/band-profile-cards.css) was enhanced to style the overlaid profile picture and band title, handle title color and positioning for various image scenarios, style the placeholder, and ensure the visual container has a minimum height.
- The `enqueue_user_profile_styles` function in [`functions.php`](mdc:functions.php) was updated to ensure [`css/band-profile-cards.css`](mdc:css/band-profile-cards.css) is loaded on relevant pages.

### Band Directory (Forum 5432)

The bbPress forum with ID 5432 is specifically designated as the "Band Directory". This forum provides a unique view that lists `band_profile` Custom Post Type entries instead of standard bbPress topics.

**Key Features & Implementation:**

*   **Custom Loop Template:** The standard topic loop for forum 5432 is replaced by a custom template located at [`bbpress/loop-band-profiles.php`](mdc:bbpress/loop-band-profiles.php), loaded via a filter function defined in [`band-platform/band-directory.php`](mdc:band-platform/band-directory.php).
*   **Content Display:** The `loop-band-profiles.php` template queries and displays `band_profile` CPT entries, rendering each as a card using the template part [`bbpress/loop-single-band-card.php`](mdc:bbpress/loop-single-band-card.php).
*   **Functionality:** Includes sorting options (Recent Activity, Alphabetical, Popular), search by name, standard bbPress pagination, and conditional "Manage Band(s)" and "Manage Link Page(s)" buttons displayed at the top for eligible logged-in users.
*   **Integrated Activity Display:** The "Latest:" activity display for the 'top' forum section now correctly includes the latest activity from all band forums associated with `band_profile` CPTs by combining standard and band forum queries within `fetch_latest_post_info_by_section` in [`forum-features/latest-post-info.php`](mdc:forum-features/latest-post-info.php).
*   **Accurate Freshness Time:** The freshness time displayed on the Band Directory card ([`bbpress/loop-single-forum-card.php`](mdc:bbpress/loop-single-forum-card.php)) now accurately shows the verbose time difference (e.g., "19 minutes ago") by utilizing `human_time_diff` with GMT timestamp comparisons.

## V. Canonical Redirect Prevention and Custom Routing for extrachill.link

**Date Added:** May 2025
**Last Updated:** May 21, 2025

To ensure that public link pages on extrachill.link (e.g., extrachill.link/band-slug) are always routed correctly and that the root domain and non-existent slugs provide a clean URL experience, we implement custom routing logic in [`link-page-rewrites.php`](mdc:band-platform/extrch.co-link-page/link-page-rewrites.php).

**1. Preventing Canonical Redirects:**

A custom filter on `redirect_canonical`, `extrch_prevent_canonical_redirect_for_link_domain`, is used to prevent WordPress's default canonical redirects when the host is `extrachill.link`. This is crucial for our custom routing system to take precedence.

```php
add_filter( 'redirect_canonical', 'extrch_prevent_canonical_redirect_for_link_domain', 10, 2 );
function extrch_prevent_canonical_redirect_for_link_domain( $redirect_url, $requested_url ) {
    $current_host = strtolower( $_SERVER['SERVER_NAME'] ?? '' );
    if ( $current_host === 'extrachill.link' ) {
        error_log('[DEBUG] extrch_prevent_canonical_redirect_for_link_domain: Preventing redirect for host ' . $current_host);
        return false; // Prevent WordPress canonical redirect
    }
    return $redirect_url;
}
```

**2. Custom Template Inclusion and Routing (`template_include`):**

The `template_include` filter is used to intercept requests on the `extrachill.link` domain and load the appropriate template or perform redirects based on the requested path:

*   **Root Path (`/`), Default Slug (`/extra-chill/`), and Non-Existent Slugs:** Requests to the root (`/`), the default 'extra-chill' slug (`/extra-chill/`), or any path that does not correspond to a valid `band_link_page` slug (other than 'extra-chill') or the `/manage-link-page/` path will display the content of the 'extra-chill' link page. Requests for the `/extra-chill/` slug and non-existent slugs will be permanently redirected (301) to the root domain (`https://extrachill.link/`) for a clean URL in the browser address bar.
*   **Valid Band Slugs (Other than `/extra-chill/`):** If the requested path matches the `post_name` of a published `band_link_page` post (and the slug is not 'extra-chill'), the main WordPress query is modified to load that specific `band_link_page` post, and the `single-band_link_page.php` template is loaded.
*   **Manage Link Page Path (`/manage-link-page/`):** If the requested path is exactly `/manage-link-page/`, the main WordPress query is modified to load the standard WordPress page with the slug 'manage-link-page', and the `page-templates/manage-link-page.php` template is loaded.

This logic ensures that the bare `extrachill.link/` serves as the primary landing page for the default content, while valid band slugs are displayed at their respective URLs and the management interface is accessible.

**3. Redirecting Direct CPT Access (`template_redirect`):**

The `template_redirect` action hook is used to redirect users accessing `band_link_page` posts directly via their default WordPress permalink structure (e.g., `https://community-stage.local/band-link-page/band-slug/`) to their canonical URL on the `extrachill.link` domain (`https://extrachill.link/band-slug/`

## Login and Registration Module

The login and registration functionality is handled by files within the `login/` directory and integrated into a combined page using the `page-templates/login-register-template.php` template.

-   **[`page-templates/login-register-template.php`](mdc:page-templates/login-register-template.php):** This template file sets up a tabbed interface using the `shared-tabs-component` class. It includes the PHP files for the login form (`login/login.php`) and the registration form (`login/register.php`) within separate tabs. It calls `wp_surgeon_login_form()` and `wp_surgeon_registration_form_shortcode()` to display the respective forms.

-   **[`login/login.php`](mdc:login/login.php):** Contains the `wp_surgeon_login_form()` function which outputs the HTML for the login form. The form action points to `wp-login.php` or `admin-ajax.php`. Cloudflare Turnstile is **not** directly integrated into this file.

-   **[`login/register.php`](mdc:login/register.php):** Contains the `wp_surgeon_registration_form_shortcode()` function which outputs the HTML for the registration form. This file includes the Cloudflare Turnstile widget with `data-sitekey="0x4AAAAAAAPvQsUv5Z6QBB5n"` and `data-callback="community_register"`. It also contains the server-side validation logic in `wp_surgeon_verify_turnstile()` which checks the `cf-turnstile-response` POST parameter against Cloudflare's API using the secret key `0x4AAAAAAAPvQp7DbBfqJD7LW-gbrAkiAb0`. Verification is bypassed in the 'development' environment.

-   **[`login/login-includes.php`](mdc:login/login-includes.php):** This file includes the core PHP files for the login module (`login.php`, `register.php`, `logout.php`, `registration-emails.php`). It also enqueues the Cloudflare Turnstile API script (`https://challenges.cloudflare.com/turnstile/v0/api.js`) and the `login-register-tabs.js` script specifically for the login/register template page.

-   **[`login/js/login-register-tabs.js`](mdc:login/js/login-register-tabs.js):** This JavaScript file handles the client-side functionality for switching between the login and registration tabs. It now also contains the `community_register` JavaScript function which is called by the Cloudflare Turnstile widget upon successful verification. This function retrieves the Turnstile token and adds it to the registration form data before submission.

-   **[`extrachill-integration/serve-login-form.php`](mdc:extrachill-integration/serve-login-form.php):** This file provides a login form via a REST API endpoint, primarily for external use (e.g., on extrachill.com). It is separate from the combined login/register page within the theme and does not include Cloudflare Turnstile.

### Cloudflare Turnstile Issue

The "captcha verification failed" error on the login page (specifically the registration tab) was caused by the missing `community_register` JavaScript function. The Cloudflare Turnstile widget was configured to call this function upon successful client-side verification, but the function was not defined. This prevented the Turnstile response from being properly handled and sent with the registration form submission, leading to server-side validation failure.

**Resolution:** The `community_register` JavaScript function has been implemented in `login/js/login-register-tabs.js`. This function now correctly handles the Turnstile callback, retrieves the token, and includes it in the registration form submission, resolving the validation error.

## Forum Section Logic and Sorting

A custom system is in place to categorize forums into sections ('top', 'middle', 'none') using the `_bbp_forum_section` post meta. This affects their display in `bbpress/loop-forums.php` and allows hiding forums from the main lists.

-   **[`bbpress-customization.php`](mdc:bbpress-customization.php):** Contains the `add_section_dropdown_to_forum_edit` function which adds a dropdown to the forum edit screen in the WordPress admin to select the forum section. The 'bottom' option has been changed to 'none'. The `save_forum_section` function saves this meta value.

-   **[`bbpress/loop-forums.php`](mdc:bbpress/loop-forums.php):** This template file displays forums in different sections. It now uses a `bbp_has_forums` loop filtered to display forums with the `_bbp_forum_section` meta set to 'middle', ordered by `_bbp_last_active_time` descending. The 'top' section display was initially using a manual loop which caused rendering issues. It has been reverted to a standard `bbp_has_forums` loop.

-   **[`band-platform/band-forums.php`](mdc:band-platform/band-forums.php):** The `bp_create_band_forum_on_save` function, which creates a bbPress forum when a band profile is published, has been modified to automatically set the `_bbp_forum_section` meta to 'none' for new band forums. This hides them from the main forum lists by default.

-   **[`band-platform/band-directory.php`](mdc:band-platform/band-directory.php):** This file contains logic specific to the Band Directory forum (ID 5432), including the `bp_get_band_profile_last_activity_timestamp` function which calculates a custom "last activity" time based on activity across all associated band forums. This custom time is displayed within the Band Directory forum card (`bbpress/loop-single-forum-card.php`).

-   **[`bbpress/loop-single-forum-card.php`](mdc:bbpress/loop-single-forum-card.php):** This template part is used to display individual forum cards. It contains specific logic to display custom stats and freshness information for the Band Directory forum (ID 5432), using the custom calculated activity time.

-   **[`functions.php`](mdc:functions.php):** A filter `ec_filter_top_forums_by_last_active` has been added to the `bbp_pre_query_forums` hook. This filter modifies the main query for the bbPress forums loop (specifically targeting the loops in `bbpress/loop-forums.php`) to: 
    -   Include a `meta_query` to filter forums by `_bbp_forum_section` = 'top'.
    -   Set the `orderby` parameter to `meta_value` using `_bbp_last_active_time` and `order` to `DESC`. 
    *Note: This standard query-based sorting uses the forum's `_bbp_last_active_time` meta. The Band Directory forum (ID 5432) has a custom last activity calculation which is displayed in its card, but this custom value is not directly used for sorting in the main forums list query. Its position in the 'top' list will be based on its standard `_bbp_last_active_time`.*

## Band Platform: Join Flow (User Onboarding)

The join flow provides a guided onboarding experience for new or existing users arriving from `extrachill.link/join`:

- **Entry Point:** Requests to `extrachill.link/join` are redirected to the main site's login/register page with a join flag (`from_join=true`). (See `band-platform/extrch.co-link-page/link-page-rewrites.php`)
- **Login/Register Modal:** The login/register template (`page-templates/login-register-template.php`) displays a modal (handled by `login/js/join-flow-ui.js`) prompting the user to log in or register. Tab switching is managed by `js/shared-tabs.js`.
- **Authentication:**
    - If the user logs in and has a band profile, they are redirected to the manage link page for their most recently updated band (`login/login.php`).
    - If the user logs in and does not have a band profile, they are redirected to create one (`page-templates/manage-band-profile.php`).
- **Band Profile Creation:** After creating a band profile, the user is redirected to the manage link page for the new band (`band-platform/frontend-forms.php`).
- **Notices:** Contextual notices are displayed at each step to guide the user (`page-templates/manage-band-profile.php`, `page-templates/manage-link-page.php`).

This flow ensures a seamless onboarding experience, guiding users from authentication through band profile creation to link page management, with all logic and UI handled in the referenced files.

## Head Output and Tracking Pixel Logic

The `extrch_link_page_custom_head` function is used ONLY for the public/live link page and outputs meta, favicon, CSS, Google Fonts, custom CSS vars, session JS, analytics, and all tracking pixels (including user-level pixels from the advanced tab and site-level Google Tag Manager).

A new function/file, `extrch_link_page_custom_vars_and_fonts_head`, is now used for outputting ONLY the custom CSS variables and Google Fonts, and is used in both the public/live page (via the custom head) and the manage page (via a `wp_head` action).

The manage page now uses only the new function for CSS vars and fonts, and does NOT output any tracking pixels, analytics, or session JS in its head.

Remove or update any previous references that implied the custom head was used for the manage page.

Ensure the documentation for the advanced tab and tracking settings is accurate and clear about where and how these are output.

Integrate these updates into the existing structure, refactoring as needed for clarity and accuracy.

## Refactor Plan: Microstep Approach

The link page manager refactor will proceed in microsteps, each focused on a single card/module within a tab. Each microstep includes:
- Reviewing and refactoring initialization, hydration, and save logic for that card/module.
- Ensuring hidden inputs and JS state are handled correctly.
- Updating the live preview logic for that card/module.
- Testing and documenting the changes.

### Customizer Tab Microsteps
1. Background Card
2. Title Font Card
3. Body Font Card
4. Button Style Card
5. Other Customizer Controls

### Links Tab Microsteps
1. Link Sections and Links
2. Social Icons

### Advanced Tab Microsteps
1. Expiration, Notifications, Redirect
2. Tracking Pixels (Meta Pixel, Google Tag, etc.)

### Analytics Tab Microsteps
1. AJAX Analytics Fetch and Display

### QR Code Microstep
1. QR Code Generation

### Final Microstep: Code Cleanup
- Remove all legacy, duplicate, or commented-out code.
- Ensure all modules use the new initialization and save flow.
- Update documentation and inline comments for clarity.
- Final round of testing across all tabs and features.

## Outlook
- This microstep approach ensures each part of the UI and save flow is robust, testable, and maintainable.
- The plan is now actionable, clear, and up-to-date, and aligns with the current state of the codebase and the new head output separation.

## Link Page Manager & Live Preview (2025-06 Refactor)

- On initial page load, PHP outputs a <style> block in the <head> with all saved custom CSS variables (from the canonical JSON in post meta). This ensures the preview and controls are immediately styled with the correct, saved values—no FOUC, no JS intervention needed for initial state.
- JavaScript only attaches event listeners to controls. On user change, JS updates only the relevant CSS variable (using style.setProperty or by updating the style tag), and the affected preview element. No global re-render, no re-initialization, no fallback to defaults after page load.
- **The style tag (`#extrch-link-page-custom-vars`) inside the preview container is the SOLE source of truth for all live preview CSS variables. All JS-driven changes (color, font, etc.) update this style tag directly and immediately reflect in the preview.**
- **The hidden input (`#link_page_custom_css_vars_json`) is NOT updated on every change. It is only populated/serialized immediately before form submission, by reading/parsing the current state from the style tag (and overlay toggle, etc). This ensures the PHP save handler receives the correct, current data.**
- The main JS function for updating settings (`updateSetting`) only updates the style tag and calls the preview updater. It does not touch the hidden input.
- The canonical save handler (`manage-link-page-save.js`) is responsible for serializing the style tag and overlay state into the hidden input before save.
- All initialization and hydration is from PHP-rendered values; there are no JS globals or window-level state objects.
- This approach ensures a single, reliable source of truth for both the live preview and the saved state, and eliminates race conditions or stale data issues.

**Summary:**
- All customization changes are reflected in the preview by updating the style tag only.
- The hidden input is only used for saving, not for live preview or intermediate state.
- This architecture is now fully implemented and is the canonical flow for the link page manager as of June 2025.

(Outdated statements about JS globals, redundant hydration, or hidden input being updated on every change have been removed.)

## VI. TinyMCE Customization

The TinyMCE editor used in bbPress has been customized to add the "formatselect" button, which allows users to select header elements (H1, H2, H3, etc.). Additionally, the editor's styles have been updated to properly align with the dark mode styles defined in `css/root.css`.

- The `bbp_customize_tinymce_buttons` function in [`forum-features/tinymce-customization.php`](mdc:forum-features/tinymce-customization.php) has been modified to include 'formatselect' in the list of buttons.
- The `body` style in `css/tinymce-editor.css` has been updated to use a more specific selector (`body.mce-content-body`) to ensure it is applied to the TinyMCE editor's body.
- Styles have been added to `css/tinymce-editor.css` to target the formatselect dropdown menu and ensure it inherits the correct CSS variables from `css/root.css` in both light and dark modes. More specific styles have been added to override the default TinyMCE styles defined in `wp-includes/css/editor.min.css`.
- The `content_css` argument has been removed from the `bbp_enable_visual_editor` function in [`forum-features/tinymce-customization.php`](mdc:forum-features/tinymce-customization.php).
- The `mce_css` filter has been added to `forum-features/tinymce-customization.php` to load the custom stylesheet.
# Project Architecture & Technical Overview

**Date:** July 2025 (Updated - Current State)

This document provides a technical overview of the Band Platform and Extrch.co Link Page features within the `extra-chill-community` theme, outlining architecture, implemented components, and a high-level overview.

## Overview

The Band Platform and Extrch.co Link Page features create a comprehensive WordPress-based ecosystem for bands, offering customizable profiles, link pages, forums, analytics, and cross-domain authentication (see dedicated section below for details). The system spans multiple domains (community.extrachill.com, extrachill.link, extrachill.com) with seamless user experience and shared control for community engagement.

**Current Status:** The platform is feature-complete with all core functionality implemented. Recent focus has been on bug fixes and performance optimizations.

## I. Band Platform

**Objective:** Establish a band-centric entity (`band_profile` CPT) with associated hidden bbPress forums, linked user accounts (`_band_profile_ids` user meta), and frontend management interfaces for shared control. Extend access to `user_is_professional` role in addition to `user_is_artist`.

**Core Principles:**
- **Band-Centric:** `band_profile` CPT as the primary entity.
- **Modularity:** Code located in [`band-platform/`](mdc:band-platform).
- **Leverage WordPress/bbPress:** Extend existing systems.
- **Shared Control:** Permissions managed via [`user_has_cap`](mdc:https:/developer.wordpress.org/reference/hooks/user_has_cap) filter.
- **Frontend Management:** Exclusive frontend UIs for band management.
- **DRY:** Consolidate forms and logic.

### Implemented Components:

- **`band_profile` CPT:** Registered in [`band-platform/cpt-band-profile.php`](mdc:band-platform/cpt-band-profile.php). Supports standard fields and custom meta for forum linking, link page association, and header images.
- **User-to-Band Linking:** Manages user associations via user meta. Includes Admin UI and frontend management interfaces.
- **Hidden Band Forums:** Created automatically for new `band_profile` posts via `save_post_band_profile` hook in [`band-platform/band-forums.php`](mdc:band-platform/band-forums.php). Forums are linked via meta and hidden from admin lists.
- **Band Member Permissions:** Implemented via `user_has_cap` filter in [`band-platform/band-permissions.php`](mdc:band-platform/band-permissions.php). The `_allow_public_topic_creation` meta controls whether non-members can create topics, defaulting to true.
- **Frontend Band Profile Display:** [`single-band_profile.php`](mdc:single-band_profile.php) displays profile data, images, associated forum topics, and new topic form.
- **Frontend Band Management:** Consolidated Create/Edit functionality in [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php). Form processing in [`band-platform/frontend-forms.php`](mdc:band-platform/frontend-forms.php), member management UI in [`band-platform/roster/manage-roster-ui.php`](mdc:band-platform/roster/manage-roster-ui.php).
- **Band Member Management (Roster):** Frontend UI handles member removal. Email invitation system with AJAX handlers, data functions, and email logic. Invitation acceptance handled on `init` hook.
- **Bi-directional Data Sync:** Logic in [`band-platform/data-sync.php`](mdc:band-platform/data-sync.php) synchronizes Band Name, Bio, and Profile Picture between `band_profile` and `band_link_page` CPTs.
- **Conditional User Menu Item:** Added to user avatar dropdown via `wp_surgeon_add_notification_bell_icon` in [`forum-features/notifications.php`](mdc:forum-features/notifications.php). Displays "Manage Band(s)" or "Create Band Profile" based on user associations.
- **User Search for Linking:** AJAX search in [`band-platform/user-linking.php`](mdc:band-platform/user-linking.php) includes users with `user_is_artist` or `user_is_professional` meta.
- **User Profile Edit Fieldset:** Fieldset in [`bbpress/form-user-edit.php`](mdc:bbpress/form-user-edit.php) displays for users with artist/professional meta.
- **Registration Logic:** Checkbox for "I am a musician" sets `user_is_artist`. Forced setting on band invite acceptance removed.
- **User Profile Meta Update:** `extrachill_update_user_profile_meta` function in [`functions.php`](mdc:functions.php) updates `user_is_artist` and `user_is_professional` from POST values.
- **Login/Register Consolidation:** Separate pages consolidated into single tabbed interface using `page-templates/login-register-template.php`. Managed by `js/shared-tabs.js`.
- **Unified Band Email Subscriber System:**
    - **Email Consent Management:** `wp_band_subscribers` table is sole repository for all consented email addresses.
    - **Platform Follow Consent:** When user follows band with email consent, record added with `source = 'platform_follow_consent'`.
    - **Unfollowing:** Removes corresponding `platform_follow_consent` record.
    - **Deprecated Meta:** `_band_follow_email_permissions` user meta deprecated.
    - **"Subscribers" Tab:** Lists subscribers from `wp_band_subscribers` table. Data fetched via AJAX handler, managed by JS. Includes CSV export.
    - **User Control via "Subscriptions" Tab:** Users manage email sharing preferences per band via settings page.
    - **Follower Tracking:** General following tracked via `_followed_band_profile_ids` user meta. `_band_follower_count` post meta reflects general follower count.

### Frontend Band Management UI Update:

The [`page-templates/manage-band-profile.php`](mdc:page-templates/manage-band-profile.php) page uses a tabbed interface with "Band Info", "Roster", and "Subscribers" tabs. Features live JavaScript-powered image previews and pre-fill for new bands. Styling in [`css/manage-band-profile.css`](mdc:css/manage-band-profile.css). Assets enqueued via `extrachill_enqueue_manage_band_profile_assets` in [`functions.php`](mdc:functions.php).

## II. `extrachill.link` Page Feature (Canonical, July 2025)

**Objective:** Provide a free, customizable "link in bio" service (`band_link_page` CPT) integrated with the Band Platform, hosted on `extrachill.link` (and `extrch.co`), driving traffic to the main platform.

### Canonical Architecture (as of July 2025)

- **CSS Variables Management:**
  - The `<style id="extrch-link-page-custom-vars">` tag inside the preview container is the *sole* source of truth for all live preview CSS variables. All JS-driven changes (color, font, etc.) update this style tag directly and immediately reflect in the preview.
  - The hidden input (`#link_page_custom_css_vars_json`) is *only* used for saving, not for live preview or intermediate state. It is populated/serialized immediately before form submission by reading/parsing the current state from the style tag (and overlay toggle, etc).
  - There are *no* JS globals or window-level state objects for canonical data. All initialization and hydration is from PHP-rendered values.

- **Live Preview & Save Flow:**
  - On initial page load, PHP outputs a `<style>` block in the `<head>` with all saved custom CSS variables (from the canonical JSON in post meta). This ensures the preview and controls are immediately styled with the correct, saved valuesâ€”no FOUC, no JS intervention needed for initial state.
  - JavaScript attaches event listeners to controls. On user change, JS updates only the relevant CSS variable (using `style.setProperty` or by updating the style tag), and the affected preview element. No global re-render, no re-initialization, no fallback to defaults after page load.
  - The main JS function for updating settings (`updateSetting`) only updates the style tag and calls the preview updater. It does not touch the hidden input.
  - The canonical save handler (`manage-link-page-save.js`) is responsible for serializing the style tag and overlay state into the hidden input before save.

- **Hidden Inputs for JS-Managed Data:**
  - For any data managed or edited via JavaScript (e.g., links, social icons, custom CSS vars, advanced settings), a hidden input must be present in the form. JavaScript must update these hidden inputs *only before form submission*, ensuring that PHP receives the correct, current data. This is required for robust, reliable saving in a PHP-driven architecture.

- **AJAX-Only Features:**
  - Only the QR code generation and analytics tab use AJAX for fetching/generating data. All other data is handled via standard form POST.

- **Recent Fixes (July 2025):**
  - Share modal, QR code modal, analytics tab, tab restoration after save, and temporary redirect dropdown are all now fully functional and hydrated from canonical DOM state. All legacy or duplicate style blocks have been removed.

- **Redundant/Outdated Logic:**
  - All references to JS globals, redundant hydration, or hidden input being updated on every change have been removed. The documentation and codebase now reflect the canonical, DRY, and KISS-compliant architecture.

### Implemented Components:

- **`band_link_page` CPT:** Registered in [`band-platform/extrch.co-link-page/cpt-band-link-page.php`](mdc:band-platform/extrch.co-link-page/cpt-band-link-page.php). One-to-one relationship with `band_profile`.
- **Automatic Creation:** Logic in [`band-platform/extrch.co-link-page/create-link-page.php`](mdc:band-platform/extrch.co-link-page/create-link-page.php) creates link pages for new band profiles.
- **Data Storage:** Meta fields store page identity, appearance customization, and links data. Data saving centralized in [`link-page-form-handler.php`](mdc:band-platform/extrch.co-link-page/link-page-form-handler.php).
- **Frontend Management Interface:** [`page-templates/manage-link-page.php`](mdc:page-templates/manage-link-page.php) provides tabbed UI for all settings. Modular JavaScript handles UI and live preview updates.
- **Routing and Display:** [`link-page-rewrites.php`](mdc:band-platform/extrch.co-link-page/link-page-rewrites.php) handles routing for `extrachill.link` domain.
- **Asset Management:** See "Head Output and Tracking Pixel Logic" section below.
- **Key Features:** Unlimited links, social icons, analytics, customization, responsive design, expiration, QR code, share menu, suggested link titles, YouTube previews, social icons position.
- **Share Modal:** Web Share API with fallbacks. HTML in template, CSS in `extrch-share-modal.css`, JS in `extrch-share-modal.js`.
- **Analytics & Tracking:** Custom DB tables with client-side tracking and AJAX endpoints. Permissions via `view_band_link_page_analytics` capability. Includes Google and Meta pixels.
- **Weekly Performance Email:** WP Cron implementation sends consolidated weekly performance summaries.

### User Navigation Enhancements:

- **Conditional "Manage Link Page(s)" Menu Item:** Added to user avatar dropdown in [`forum-features/notifications.php`](mdc:forum-features/notifications.php). Links to most recently updated band profile.
- **Band Switcher:** Dropdown in [`page-templates/manage-link-page.php`](mdc:page-templates/manage-link-page.php) allows switching between band profiles.

## III. Customization & Live Preview JavaScript Architecture

**Note:** For the canonical source of truth and template responsibilities, see the 'Link Page Rendering Architecture (Canonical Source of Truth)' section below. This section focuses on JavaScript module responsibilities only.

**Core Principle:** DOM (PHP-rendered values and style tag) as single source of truth, no persistent JavaScript state.

**Key Modules:**
- **Main Manager (`manage-link-page.js`):** Central orchestrator, initializes modules
- **"Brain" Modules:** Manage UI controls for specific domains (styles, links, social icons)
  - `manage-link-page-customization.js` - Style settings and CSS variable updates
  - `manage-link-page-links.js` - Links list UI and data management
  - `manage-link-page-socials.js` - Social icons UI and position settings
- **"Engine" Modules:** Render live preview based on DOM state
  - `manage-link-page-preview-updater.js` - Styles engine (CSS variables)
  - `manage-link-page-content-renderer.js` - Content engine (links, social icons)
- **Save Handler (`manage-link-page-save.js`):** Serializes DOM state to hidden inputs before form submission
- **AJAX Handlers:** Link title fetching, QR code generation, YouTube embeds

## VII. Mobile Save Corruption Resolution (July 2025)

**Issue:** Mobile browsers experienced save corruption where changes would reset customization to defaults.

**Root Cause:** WordPress `wp_slash()` function corrupted JSON strings containing quotes during meta saves.

**Solution:** 
- Changed from saving JSON strings to saving decoded arrays
- Updated all retrieval logic for backward compatibility
- Unified mobile/desktop code paths

**Files Updated:** `link-page-form-handler.php`, `LinkPageDataProvider.php`, `create-link-page.php`, `link-page-includes.php`, `manage-link-page.php`, `link-page-custom-vars-and-fonts-head.php`

**Result:** Mobile save corruption resolved while improving code quality and maintainability.

## IV. Band Directory Enhancements

### Implemented:

Updated band cards in custom directory ([`band-platform/band-directory.php`](mdc:band-platform/band-directory.php) and [`bbpress/loop-single-band-card.php`](mdc:bbpress/loop-single-band-card.php)) for better visual presentation. Profile picture displayed as square overlay on header image. CSS in [`css/band-profile-cards.css`](mdc:css/band-profile-cards.css).

### Band Directory (Forum 5432)

The bbPress forum with ID 5432 is designated as the "Band Directory", listing `band_profile` CPT entries instead of standard bbPress topics.

**Key Features:**
- **Custom Loop Template:** [`bbpress/loop-band-profiles.php`](mdc:bbpress/loop-band-profiles.php) replaces standard topic loop
- **Content Display:** Queries and displays `band_profile` CPT entries as cards
- **Functionality:** Sorting options, search, pagination, conditional management buttons
- **Integrated Activity Display:** Latest activity from all band forums included in 'top' section
- **Accurate Freshness Time:** Verbose time difference displayed using `human_time_diff`

## V. Canonical Redirect Prevention and Custom Routing for extrachill.link

Custom routing logic in [`link-page-rewrites.php`](mdc:band-platform/extrch.co-link-page/link-page-rewrites.php) ensures proper routing for `extrachill.link` domain.

**1. Preventing Canonical Redirects:**
Custom filter `extrch_prevent_canonical_redirect_for_link_domain` prevents WordPress canonical redirects when host is `extrachill.link`.

**2. Custom Template Inclusion (`template_include`):**
- **Root Path (`/`), Default Slug (`/extra-chill/`), Non-Existent Slugs:** Display 'extra-chill' link page content. Redirects to root domain.
- **Valid Band Slugs:** Load specific `band_link_page` post and `single-band_link_page.php` template.
- **Manage Link Page Path (`/manage-link-page/`):** Load standard WordPress page with 'manage-link-page' slug.

**3. Redirecting Direct CPT Access (`template_redirect`):**
Redirects direct `band_link_page` access to canonical URL on `extrachill.link` domain.

## Cross-Domain Authentication System

The platform implements a sophisticated cross-domain authentication system that allows seamless user experience across multiple domains:

**Domains Involved:**
- `community.extrachill.com` - Main community platform
- `extrachill.link` - Public link pages
- `extrachill.com` - Main site (future WooCommerce integration)

**Session Token System:**
- Custom session tokens stored in `wp_user_session_tokens` table
- 6-month expiration with automatic cleanup
- Cross-domain cookie sharing via `.extrachill.com` domain
- REST API endpoints for external authentication

**Key Files:**
- `extrachill-integration/session-tokens.php` - Core session management
- `extrachill-integration/seamless-login.php` - External login handling
- `extrachill-integration/get-user-details.php` - User data retrieval
- `extrachill-integration/validate-session.php` - Session validation
- `js/seamless-login.js` - Client-side authentication

**Authentication Flow:**
1. User logs in on any domain via REST API
2. Session token generated and stored in database
3. Cookie set for `.extrachill.com` domain (covers all subdomains)
4. Auto-login triggered on subsequent visits via `auto_login_via_session_token()`
5. Cross-domain requests validated using token in Authorization header

## Login and Registration Module

The login and registration functionality is handled by files within the `login/` directory and integrated into a combined page using the `page-templates/login-register-template.php` template.

-   **[`page-templates/login-register-template.php`](mdc:page-templates/login-register-template.php):** This template file sets up a tabbed interface using the `shared-tabs-component` class. It includes the PHP files for the login form (`login/login.php`) and the registration form (`login/register.php`) within separate tabs. It calls `wp_surgeon_login_form()` and `wp_surgeon_registration_form_shortcode()` to display the respective forms.

-   **[`login/login.php`](mdc:login/login.php):** Contains the `wp_surgeon_login_form()` function which outputs the HTML for the login form. The form action points to `wp-login.php` or `admin-ajax.php`. Cloudflare Turnstile is **not** directly integrated into this file.

-   **[`login/register.php`](mdc:login/register.php):** Contains the `wp_surgeon_registration_form_shortcode()` function which outputs the HTML for the registration form. This file includes the Cloudflare Turnstile widget with `data-sitekey="0x4AAAAAAAPvQsUv5Z6QBB5n"` and `data-callback="community_register"`. It also contains the server-side validation logic in `wp_surgeon_verify_turnstile()` which checks the `cf-turnstile-response` POST parameter against Cloudflare's API using the secret key `0x4AAAAAAAPvQp7DbBfqJD7LW-gbrAkiAb0`. Verification is bypassed in the 'development' environment.

-   **[`login/login-includes.php`](mdc:login/login-includes.php):** This file includes the core PHP files for the login module (`login.php`, `register.php`, `logout.php`, `registration-emails.php`). It also enqueues the Cloudflare Turnstile API script (`https://challenges.cloudflare.com/turnstile/v0/api.js`) and the `login-register-tabs.js` script specifically for the login/register template page.

-   **[`login/js/login-register-tabs.js`](mdc:login/js/login-register-tabs.js):** This JavaScript file handles the client-side functionality for switching between the login and registration tabs. It now also contains the `community_register` JavaScript function which is called by the Cloudflare Turnstile widget upon successful verification. This function retrieves the Turnstile token and adds it to the registration form data before submission.

-   **[`extrachill-integration/serve-login-form.php`](mdc:extrachill-integration/serve-login-form.php):** This file provides a login form via a REST API endpoint, primarily for external use (e.g., on extrachill.com). It is separate from the combined login/register page within the theme and does not include Cloudflare Turnstile.

### Cloudflare Turnstile Issue

The "captcha verification failed" error on the login page (specifically the registration tab) was caused by the missing `community_register` JavaScript function. The Cloudflare Turnstile widget was configured to call this function upon successful client-side verification, but the function was not defined. This prevented the Turnstile response from being properly handled and sent with the registration form submission, leading to server-side validation failure.

**Resolution:** The `community_register` JavaScript function has been implemented in `login/js/login-register-tabs.js`. This function now correctly handles the Turnstile callback, retrieves the token, and includes it in the registration form submission, resolving the validation error.

## Forum Section Logic and Sorting

A custom system is in place to categorize forums into sections ('top', 'middle', 'none') using the `_bbp_forum_section` post meta. This affects their display in `bbpress/loop-forums.php` and allows hiding forums from the main lists.

-   **[`bbpress-customization.php`](mdc:bbpress-customization.php):** Contains the `add_section_dropdown_to_forum_edit` function which adds a dropdown to the forum edit screen in the WordPress admin to select the forum section. The 'bottom' option has been changed to 'none'. The `save_forum_section` function saves this meta value.

-   **[`bbpress/loop-forums.php`](mdc:bbpress/loop-forums.php):** This template file displays forums in different sections. It now uses a `bbp_has_forums` loop filtered to display forums with the `_bbp_forum_section` meta set to 'middle', ordered by `_bbp_last_active_time` descending. The 'top' section display was initially using a manual loop which caused rendering issues. It has been reverted to a standard `bbp_has_forums` loop.

-   **[`band-platform/band-forums.php`](mdc:band-platform/band-forums.php):** The `bp_create_band_forum_on_save` function, which creates a bbPress forum when a band profile is published, has been modified to automatically set the `_bbp_forum_section` meta to 'none' for new band forums. This hides them from the main forum lists by default.

-   **[`band-platform/band-directory.php`](mdc:band-platform/band-directory.php):** This file contains logic specific to the Band Directory forum (ID 5432), including the `bp_get_band_profile_last_activity_timestamp` function which calculates a custom "last activity" time based on activity across all associated band forums. This custom time is displayed within the Band Directory forum card (`bbpress/loop-single-forum-card.php`).

-   **[`bbpress/loop-single-forum-card.php`](mdc:bbpress/loop-single-forum-card.php):** This template part is used to display individual forum cards. It contains specific logic to display custom stats and freshness information for the Band Directory forum (ID 5432), using the custom calculated activity time.

-   **[`functions.php`](mdc:functions.php):** A filter `ec_filter_top_forums_by_last_active` has been added to the `bbp_pre_query_forums` hook. This filter modifies the main query for the bbPress forums loop (specifically targeting the loops in `bbpress/loop-forums.php`) to: 
    -   Include a `meta_query` to filter forums by `_bbp_forum_section` = 'top'.
    -   Set the `orderby` parameter to `meta_value` using `_bbp_last_active_time` and `order` to `DESC`. 
    *Note: This standard query-based sorting uses the forum's `_bbp_last_active_time` meta. The Band Directory forum (ID 5432) has a custom last activity calculation which is displayed in its card, but this custom value is not directly used for sorting in the main forums list query. Its position in the 'top' list will be based on its standard `_bbp_last_active_time`.*

## Band Platform: Join Flow (User Onboarding)

The join flow provides a guided onboarding experience for new or existing users arriving from `extrachill.link/join`:

- **Entry Point:** Requests to `extrachill.link/join` are redirected to the main site's login/register page with a join flag (`from_join=true`). (See `band-platform/extrch.co-link-page/link-page-rewrites.php`)
- **Login/Register Modal:** The login/register template (`page-templates/login-register-template.php`) displays a modal (handled by `login/js/join-flow-ui.js`) prompting the user to log in or register. Tab switching is managed by `js/shared-tabs.js`.
- **Authentication:**
    - If the user logs in and has a band profile, they are redirected to the manage link page for their most recently updated band (`login/login.php`).
    - If the user logs in and does not have a band profile, they are redirected to create one (`page-templates/manage-band-profile.php`).
- **Band Profile Creation:** After creating a band profile, the user is redirected to the manage link page for the new band (`band-platform/frontend-forms.php`).
- **Notices:** Contextual notices are displayed at each step to guide the user (`page-templates/manage-band-profile.php`, `page-templates/manage-link-page.php`).

This flow ensures a seamless onboarding experience, guiding users from authentication through band profile creation to link page management, with all logic and UI handled in the referenced files.

## Head Output and Tracking Pixel Logic

The `extrch_link_page_custom_head` function is used ONLY for the public/live link page (`single-band_link_page.php`) and outputs meta, favicon, CSS, Google Fonts, custom CSS vars, session JS, analytics, and all tracking pixels (including user-level pixels from the advanced tab and site-level Google Tag Manager).

A separate function, `extrch_link_page_custom_vars_and_fonts_head`, is used for outputting ONLY the custom CSS variables and Google Fonts. This function is used in:
- **Public/Live Page:** Called by `extrch_link_page_custom_head` 
- **Manage Page:** Called via `wp_head` action hook in `link-page-includes.php`

The manage page (`page-templates/manage-link-page.php`) uses only the `extrch_link_page_custom_vars_and_fonts_head` function for CSS vars and fonts, and does NOT output any tracking pixels, analytics, or session JS in its head.

**Key Files:**
- `band-platform/extrch.co-link-page/link-page-head.php` - Custom head for public pages
- `band-platform/extrch.co-link-page/link-page-custom-vars-and-fonts-head.php` - Shared CSS vars and fonts
- `band-platform/extrch.co-link-page/link-page-includes.php` - Manage page head setup

## Link Page Rendering Architecture (Canonical Source of Truth)

The canonical, single source of truth for all link page rendering logic is the `band-platform/extrch.co-link-page/extrch-link-page-template.php` file. This template contains all shared logic and markup for the link page, including profile image, title, bio, links, social icons, subscribe button, and all conditional rendering for context (e.g., subscribe form/modal, social icon position, featured link, etc).

- **Public/Live Page:** The public-facing link page (`single-band_link_page.php`) gathers all necessary data (via `LinkPageDataProvider`), handles public-only logic (edit button, tracking, analytics, head output), and includes the canonical template with the data array.
- **Management Preview:** The management interface preview (`band-platform/extrch.co-link-page/live-preview/preview.php`) acts as a wrapper for the preview context, sets up preview-specific classes and context, and includes the canonical template with the preview data. It sets the `is_extrch_preview_iframe` query var for context.
- **Context Handling:** The canonical template uses context flags (such as `is_extrch_preview_iframe`) to conditionally render preview- or live-only elements. All context-specific logic (wrappers, analytics, edit button, etc.) is handled by the respective wrapper files or via these flags.

**All changes to the link page's structure, classes, or logic should be made in `extrch-link-page-template.php` only.** The preview and live page will always be in sync, as they use the same template. There is no duplication of the main link page structure or logic.

**Key Files:**
- `band-platform/extrch.co-link-page/extrch-link-page-template.php` - Canonical template
- `band-platform/extrch.co-link-page/data/LinkPageDataProvider.php` - Canonical data provider
- `single-band_link_page.php` - Public page wrapper
- `band-platform/extrch.co-link-page/live-preview/preview.php` - Preview wrapper

## VI. TinyMCE Customization

The TinyMCE editor used in bbPress has been customized for enhanced functionality and consistent styling. These customizations are primarily handled in [`forum-features/tinymce-customization.php`](mdc:forum-features/tinymce-customization.php) and [`css/tinymce-editor.css`](mdc:css/tinymce-editor.css).

- The `bbp_customize_tinymce_buttons` function in [`forum-features/tinymce-customization.php`](mdc:forum-features/tinymce-customization.php) has been modified to include 'formatselect' in the list of buttons, allowing users to select header elements.
- The custom stylesheet [`css/tinymce-editor.css`](mdc:css/tinymce-editor.css) is loaded into the TinyMCE editor's content iframe using the `mce_css` filter via the `bbp_add_tinymce_stylesheet` function. This stylesheet is specifically for styling the *content* displayed within the editor iframe, not the editor UI itself.
- To ensure styles apply within the iframe and override default TinyMCE styles, many CSS declarations in `css/tinymce-editor.css` utilize `!important` flags.
- Color variables defined in the main theme's `:root` are made available within the TinyMCE iframe by including a duplicate set of these definitions at the beginning of `css/tinymce-editor.css`, scoped to the iframe's `:root`.
- The `extrachillTinymceSetup` JavaScript function, added via the `tiny_mce_before_init` filter and output in the footer, handles custom TinyMCE initialization logic, including integrating the autosave plugin.
- The function finds the closest parent form to the editor instance and attaches a submit event listener to it to clear autosave drafts on submission. This approach, by not checking for specific form IDs (`new-post`, `new-post-quick`), was found to resolve a conflict where the presence of the quick reply form interfered with the loading of other forms on the page.
- Styling the TinyMCE editor toolbar and other UI elements outside the content iframe requires targeting them with CSS rules in stylesheets loaded on the main page (e.g., `style.css`) or other relevant theme stylesheets, as `tinymce-editor.css` only affects the iframe content.
- The `content_css` argument is no longer used for loading `tinymce-editor.css`; the `mce_css` filter is the current method.

## Current State & Pre-Launch Technical Debt (July 2025)

- **PHP/JS Sync:** Featured link rendering, socials/subscribe form order, and class application logic exist in both PHP and JS. These must be kept in sync to avoid UI drift between live and preview.
- **Vestigial Settings/Meta:** Some settings and meta keys (e.g., featured link custom title) are now obsolete and should be removed as features are refactored.
- **DRYness:** Insertion logic for socials/subscribe and class naming should be kept DRY and centralized where possible.
- **Button Border & Subscribe Form CSS:** There is inconsistency in button border styling and subscribe form CSS scoping between live and preview. This should be unified for a consistent user experience.
- **All above issues are confirmed, documented, and prioritized for pre-launch resolution.**

## Featured Link and Live Preview

- The featured link's custom class (`bp-editor-featured-link`) is now set server-side on initial render, ensuring correct visual highlighting. JavaScript only moves this class when the user changes the featured link selection; it does not touch the initial state.
- Real-time updates for the featured link's title and description in the live preview are now canonical. When the user edits the title or description for the featured link, the preview updates instantly, without re-fetching the thumbnail or causing a flash.
- The featured link thumbnail is only fetched (via AJAX) on initial link selection. Editing the title or description does not trigger a new fetch or reload of the thumbnail, preventing unnecessary flashes.
- For further details on the canonical data flow and featured link architecture, see [finalize-link-page-source-of-truth.mdc](mdc:.cursor/rules/finalize-link-page-source-of-truth.mdc) and [feature-featured-link.mdc](mdc:.cursor/rules/feature-featured-link.mdc).
- The JavaScript logic for the featured link is now fully DRY and modular. All preview and live logic is kept in sync via the canonical template (`extrch-link-page-template.php`) and the canonical data provider (`LinkPageDataProvider.php`).

## Link Page Customization Data Keys (Canonical Naming)

- The canonical key for the profile image shape in the link page customization JSON is `_link_page_profile_img_shape`.
- All hydration and save logic (both PHP and JS) must use this key for reading and writing the profile image shape.
- (Note: All legacy keys, such as `--link-page-profile-img-shape`, have been fully removed from the codebase and are no longer supported. Only the canonical key `_link_page_profile_img_shape` is valid.)

### Hydration and Save Flow (Explicit)
- On initial page load, PHP hydrates all form controls and the `<style id="extrch-link-page-custom-vars">` tag from the canonical `$custom_vars` array, which is decoded from the `_link_page_custom_css_vars` JSON meta.
- The preview and all controls must always reflect the value of the canonical key.
- JavaScript never sets initial values; it only listens for changes and updates the preview and hidden input before save.
- There must never be a mismatch between the style tag and the form controls, as both are hydrated from the same source.
- Legacy meta is only used as a fallback for old data, never as a primary source.
---
description: 
globs: 
alwaysApply: false
---
# Developer Guide: Refactoring Link Page Live Preview and JavaScript Logic

This document provides a clear, step-by-step guide and architectural reference for the Extrch.co Link Page live preview and management interface refactor. It is intended for developers working on the `extra-chill-community` theme, ensuring a robust, maintainable, and predictable system for all link page customization, preview, and save flows.

## Purpose

This document provides a clear, step-by-step guide and architectural reference for the Extrch.co Link Page live preview and management interface refactor. It is intended for developers working on the `extra-chill-community` theme, ensuring a robust, maintainable, and predictable system for all link page customization, preview, and save flows.

## Canonical Architecture & Data Flow (Current State: June 2025)

- **Single Source of Truth:** All customization data (colors, fonts, sizing, etc.) is stored as CSS variables in a `<style id="extrch-link-page-custom-vars">` block in the `<head>`. On page load, PHP outputs this style tag with all saved values. JavaScript only updates this style tag in real time as the user interacts with controls.
- **Hidden Inputs:** All JS-managed data (links, socials, custom vars, etc.) must have a unique hidden input in the form. **No duplicate hidden inputs with the same name/id are allowed.**
- **No JS Globals:** There are no JS globals (e.g., `window.extrchLinkPageInitialData`). All hydration is from PHP-rendered DOM values.
- **Live Preview:** All customization controls update the style tag in real time. The preview always reflects the current state of this style tag.
- **Saving:** On form submit, the canonical save handler serializes the current CSS variables from the style tag (and overlay toggle, etc.) into the hidden input. The PHP handler saves this value to post meta. On reload, PHP hydrates all controls and the preview from this meta.
- **No hidden input updates on every change.** Hidden inputs are only updated before save.

## Recent Fixes (June 2025)

- **Social Icons Save Bug:** Resolved a persistent bug where social icons were not saving due to duplicate hidden inputs (`band_profile_social_links_json`) in the form. The browser would submit the value from the first (empty) input, ignoring the one managed by JS. **Fix:** Ensure only one unique hidden input for each JS-managed data field.
- **No JS Globals:** Removed the `window.extrchLinkPageInitialData` global from the manage page template. All modules now hydrate from the DOM only.
- **Canonical Save Flow:** The save flow is now robust: JS updates the correct hidden input, FormData captures the correct value, and PHP receives and saves the correct data.
- **Share Modal Parity:** Share modal icons and open functionality now match between preview and live page.
- **QR Code and Analytics:** Both are now functional in the manager.
- **Temporary Redirect Dropdown:** Hydrates from canonical DOM state.
- **Tab Restoration:** Now works via hash and pane id.

## Microstep Refactor Plan (Status: Code Cleanup In Progress)

- All microsteps for Customizer, Links, Advanced, Analytics, and QR Code are now complete and working as intended.
- Code cleanup and documentation are the final steps.

## Best Practices (Enforced)

- **Unique hidden inputs only.**
- **No JS globals.**
- **All hydration from PHP-rendered DOM.**
- **All JS-managed data present in hidden inputs before submit.**
- **Canonical save handler serializes DOM state to hidden input before submit.**
- **No shadow state, no redundant hydration, no window-level objects.**

## Known Issues (as of June 2025)
- None. All previously listed issues (share modal, QR code, analytics, tab restoration, temporary redirect dropdown) are now resolved.

## Outlook
- The refactor is complete for the canonical save/preview flow. All modules and tabs are now robust, testable, and maintainable. Code cleanup and documentation updates are in progress. Any further improvements will be incremental and should follow this architecture.

## 1. Canonical Architecture: Single Source of Truth

- **All customization data (colors, fonts, sizing, etc.) is stored as CSS variables in a `<style id="extrch-link-page-custom-vars">` block in the `<head>`.**
- **On page load, PHP outputs this style tag with all saved values.**
- **JavaScript only updates this style tag in real time as the user interacts with controls.**
- **The hidden input (`#link_page_custom_css_vars_json`) is used ONLY for saving: it is populated by JS immediately before form submission, by serializing the current state of the style tag.**
- **No JS globals, window-level objects, or shadow state are used for hydration or saving.**
- **All initialization and hydration is from PHP-rendered values in the DOM.**

## 2. Data Flow & Save Flow

**Live Preview:**
- All customization controls (color pickers, font selectors, sliders, etc.) update the `<style id="extrch-link-page-custom-vars">` tag in real time.
- The preview always reflects the current state of this style tag.

**Saving:**
- On form submit, the canonical save handler (`manage-link-page-save.js`) serializes the current CSS variables from the style tag (and overlay toggle, etc.) into the hidden input (`#link_page_custom_css_vars_json`).
- The PHP handler saves this value to post meta.
- On reload, PHP hydrates all controls and the preview from this meta.

**No hidden input updates on every change.**  
**No JS state or global is used for saving.**

## 3. Initialization & Hydration

- **On page load, all form fields and CSS vars are populated by PHP from saved values.**
- **JS modules hydrate their state from the DOM/hidden input, not from JS globals.**
- **The main manager (`manage-link-page.js`) calls each module's `init()` function on `DOMContentLoaded`.**
- **Each module attaches event listeners to its controls and updates the style tag as needed.**

## 4. Microstep Refactor Plan (as of June 2025)

Each card/module in the UI is refactored in microsteps:

### Customizer Tab
Status: **Complete / Working**
1. **Background Card**
   - Refactor background color/image/gradient logic.
   - Ensure hidden input is updated (`link_page_custom_css_vars_json`) and hydrated correctly.
   - **JS Hydration & Update:** Addressed in `manage-link-page-customization.js` `init()`. Live updates use inline styles (deviation).
   - **PHP Save:** Verified in `link-page-form-handler.php`.
   - **Status:** Complete.
2. **Title Font Card**
   - Refactor font family/size logic.
   - Ensure Google Fonts are loaded and custom vars are set.
   - **JS Hydration & Update:** Addressed in `manage-link-page-customization.js` `init()`. Live updates use inline styles (deviation).
   - **PHP Save:** Verified.
   - **Status:** Complete.
3. **Body Font Card**
   - Refactor body font logic.
   - **JS Hydration & Update:** Addressed in `manage-link-page-customization.js` `init()`. Live updates use inline styles (deviation).
   - **PHP Save:** Verified.
   - **Status:** Complete.
4. **Info Card (Title, Bio, Profile Image)**
   - Refactor to use new architecture for live preview and save.
   - **JS Hydration & Update:** Now uses modular event-driven logic in `manage-link-page-info.js` and `manage-link-page-content-renderer.js`.
   - **Live Preview:** Title, bio, and profile image now update instantly in the preview as you type or upload.
   - **PHP Save:** Verified.
   - **Status:** Complete.
5. **Button Style Card:** Button radius. (Status: Complete)
6. **Other Controls:** Overlay toggle, profile image shape/size. (Status: Complete)

### Links Tab
Status: **Complete / Working**
- Canonical PHP-driven. All link rows/controls are output by PHP. JS attaches listeners for add/remove/edit, and serializes DOM state to hidden input before save. Drag-and-drop, add/remove, and live preview are all functional.

### Advanced Tab
Status: **Complete / Working**
- Expiration, Notifications, Redirect, and Tracking Pixels are all functional and save correctly. Preview and UI reflect current state.

### Analytics Tab
Status: **Complete / Working**
- AJAX analytics fetch and display is functional. Correct config, nonce, and permissions are in place. Analytics data display and error handling are robust.

### QR Code
Status: **Complete / Working**
- QR code modal and AJAX logic are functional. QR code generation and error handling are robust.

### Final Microstep: Code Cleanup
Status: **In Progress**
- Remove all legacy, duplicate, or commented-out code (including any remaining redundant style blocks, JS globals, commented-out logic, misplaced style tags, and redundant inline scripts).
    - Non-critical `console.log` and `console.warn` statements removed from key Link Page Manager JS files. (Completed)
- Ensure all modules use the new initialization and save flow.
- Update documentation and inline comments for clarity.
- Final round of testing across all tabs and features.

## Implementation Checklist (Bulletproof Hydration) - Updated June 2025 (Revised)

- [X] All JS-managed data modules hydrate from the hidden input on page load.
- [X] All UI changes update the hidden input and the preview.
- [X] The canonical save handler serializes the DOM state to the hidden input before submit.
- [X] No JS globals, no shadow state, no redundant hydration.
- [X] All microsteps for the Customizer Tab, Links Tab, Advanced Tab, Analytics Tab, and QR Code are complete and working.

## QA/Testing Requirements - Updated June 2025
- [X] On page load, the preview and all controls always show the saved value, regardless of which tab is active or which module initializes first.
- [X] There is no FOUC (Flash of Unstyled Content) or overwriting of the preview/controls by defaults or stale globals.
- [X] Changing any customization option (CSS Vars) immediately updates the preview and the style tag.
- [X] Saving persists the change. The hidden input is updated only before save.
- [X] After saving and reloading, the preview and controls reflect the saved value, not a default or stale value.
- [X] The `<style id="extrch-link-page-custom-vars">` block is present in the `<head>` of both the manage page (via `wp_head`) and the public link page.
- [X] The `<style id="extrch-link-page-initial-custom-vars">` block is *not* present in the `<body>` of `extrch-link-page-template.php`.
- [X] The empty `<style id="extrch-link-page-preview-live-update-vars"></style>` tag is present in the `<body>` of the manage page preview iframe (`preview.php`) and the JS preview updater correctly targets styles for the preview.
- [X] No JavaScript errors related to initialization or data access.
- [X] The public link page displays correctly with the saved customizations and advanced settings function as expected.

## Known Bugs (as of June 2025)
- None. All previously listed issues are now resolved.

## Outlook
- The refactor is complete for the canonical save/preview flow. All modules and tabs are now robust, testable, and maintainable. Code cleanup and documentation are in progress. Any further improvements will be incremental and should follow this architecture.

## Canonical Flow for JS-Managed Data (June 2025)

- The hidden input rendered by PHP is the single source of truth for all JS-managed data (links, socials, custom vars, etc.).
- On page load, JS modules hydrate their state from the hidden input (not from JS globals or window objects).
- On any UI change, JS updates the hidden input and the live preview.
- On save, the canonical save handler serializes the DOM state to the hidden input before submit (as a final safety net).
- There is no shadow state, no redundant hydration, and no window-level objects.
- This applies to links, socials, custom vars, and any future JS-managed data.

### Implementation Checklist (Updated)
- [X] All JS-managed data modules hydrate from the hidden input on page load.
- [X] All UI changes update the hidden input and the preview.
- [X] The canonical save handler serializes the DOM state to the hidden input before submit.
- [X] No JS globals, no shadow state, no redundant hydration.

## Next Steps
- Continue with code cleanup and documentation updates before final QA and closeout.

## Featured Link Logic (Status: Complete)
- The featured link's class is set server-side on initial render, and only moved by JS on user action.
- Real-time featured link title/description update and thumbnail fetch-once logic are now canonical and implemented.
- For further details, see [finalize-link-page-source-of-truth.mdc](mdc:.cursor/rules/finalize-link-page-source-of-truth.mdc) and [feature-featured-link.mdc](mdc:.cursor/rules/feature-featured-link.mdc).